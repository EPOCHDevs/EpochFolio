// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tearsheet.proto
// Protobuf C++ Version: 5.29.5

#ifndef tearsheet_2eproto_2epb_2eh
#define tearsheet_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "table_def.pb.h"
#include "chart_def.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tearsheet_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tearsheet_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tearsheet_2eproto;
namespace epoch_proto {
class FullTearSheet;
struct FullTearSheetDefaultTypeInternal;
extern FullTearSheetDefaultTypeInternal _FullTearSheet_default_instance_;
class TearSheet;
struct TearSheetDefaultTypeInternal;
extern TearSheetDefaultTypeInternal _TearSheet_default_instance_;
}  // namespace epoch_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace epoch_proto {

// ===================================================================


// -------------------------------------------------------------------

class TearSheet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.TearSheet) */ {
 public:
  inline TearSheet() : TearSheet(nullptr) {}
  ~TearSheet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TearSheet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TearSheet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TearSheet(
      ::google::protobuf::internal::ConstantInitialized);

  inline TearSheet(const TearSheet& from) : TearSheet(nullptr, from) {}
  inline TearSheet(TearSheet&& from) noexcept
      : TearSheet(nullptr, std::move(from)) {}
  inline TearSheet& operator=(const TearSheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TearSheet& operator=(TearSheet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TearSheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const TearSheet* internal_default_instance() {
    return reinterpret_cast<const TearSheet*>(
        &_TearSheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TearSheet& a, TearSheet& b) { a.Swap(&b); }
  inline void Swap(TearSheet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TearSheet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TearSheet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TearSheet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TearSheet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TearSheet& from) { TearSheet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TearSheet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.TearSheet"; }

 protected:
  explicit TearSheet(::google::protobuf::Arena* arena);
  TearSheet(::google::protobuf::Arena* arena, const TearSheet& from);
  TearSheet(::google::protobuf::Arena* arena, TearSheet&& from) noexcept
      : TearSheet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCardsFieldNumber = 1,
    kChartsFieldNumber = 2,
    kTablesFieldNumber = 3,
  };
  // repeated .epoch_proto.CardDef cards = 1;
  int cards_size() const;
  private:
  int _internal_cards_size() const;

  public:
  void clear_cards() ;
  ::epoch_proto::CardDef* mutable_cards(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>* mutable_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>& _internal_cards() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>* _internal_mutable_cards();
  public:
  const ::epoch_proto::CardDef& cards(int index) const;
  ::epoch_proto::CardDef* add_cards();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>& cards() const;
  // repeated .epoch_proto.Chart charts = 2;
  int charts_size() const;
  private:
  int _internal_charts_size() const;

  public:
  void clear_charts() ;
  ::epoch_proto::Chart* mutable_charts(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>* mutable_charts();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>& _internal_charts() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>* _internal_mutable_charts();
  public:
  const ::epoch_proto::Chart& charts(int index) const;
  ::epoch_proto::Chart* add_charts();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>& charts() const;
  // repeated .epoch_proto.Table tables = 3;
  int tables_size() const;
  private:
  int _internal_tables_size() const;

  public:
  void clear_tables() ;
  ::epoch_proto::Table* mutable_tables(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>* mutable_tables();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>& _internal_tables() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>* _internal_mutable_tables();
  public:
  const ::epoch_proto::Table& tables(int index) const;
  ::epoch_proto::Table* add_tables();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>& tables() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.TearSheet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TearSheet& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::CardDef > cards_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Chart > charts_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Table > tables_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};
// -------------------------------------------------------------------

class FullTearSheet final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.FullTearSheet) */ {
 public:
  inline FullTearSheet() : FullTearSheet(nullptr) {}
  ~FullTearSheet() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FullTearSheet* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FullTearSheet));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FullTearSheet(
      ::google::protobuf::internal::ConstantInitialized);

  inline FullTearSheet(const FullTearSheet& from) : FullTearSheet(nullptr, from) {}
  inline FullTearSheet(FullTearSheet&& from) noexcept
      : FullTearSheet(nullptr, std::move(from)) {}
  inline FullTearSheet& operator=(const FullTearSheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FullTearSheet& operator=(FullTearSheet&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FullTearSheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FullTearSheet* internal_default_instance() {
    return reinterpret_cast<const FullTearSheet*>(
        &_FullTearSheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FullTearSheet& a, FullTearSheet& b) { a.Swap(&b); }
  inline void Swap(FullTearSheet* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FullTearSheet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FullTearSheet* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FullTearSheet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FullTearSheet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FullTearSheet& from) { FullTearSheet::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FullTearSheet* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.FullTearSheet"; }

 protected:
  explicit FullTearSheet(::google::protobuf::Arena* arena);
  FullTearSheet(::google::protobuf::Arena* arena, const FullTearSheet& from);
  FullTearSheet(::google::protobuf::Arena* arena, FullTearSheet&& from) noexcept
      : FullTearSheet(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStrategyBenchmarkFieldNumber = 1,
    kRiskAnalysisFieldNumber = 2,
    kReturnsDistributionFieldNumber = 3,
    kPositionsFieldNumber = 4,
    kTransactionsFieldNumber = 5,
    kRoundTripFieldNumber = 6,
  };
  // .epoch_proto.TearSheet strategy_benchmark = 1;
  bool has_strategy_benchmark() const;
  void clear_strategy_benchmark() ;
  const ::epoch_proto::TearSheet& strategy_benchmark() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_strategy_benchmark();
  ::epoch_proto::TearSheet* mutable_strategy_benchmark();
  void set_allocated_strategy_benchmark(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_strategy_benchmark(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_strategy_benchmark();

  private:
  const ::epoch_proto::TearSheet& _internal_strategy_benchmark() const;
  ::epoch_proto::TearSheet* _internal_mutable_strategy_benchmark();

  public:
  // .epoch_proto.TearSheet risk_analysis = 2;
  bool has_risk_analysis() const;
  void clear_risk_analysis() ;
  const ::epoch_proto::TearSheet& risk_analysis() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_risk_analysis();
  ::epoch_proto::TearSheet* mutable_risk_analysis();
  void set_allocated_risk_analysis(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_risk_analysis(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_risk_analysis();

  private:
  const ::epoch_proto::TearSheet& _internal_risk_analysis() const;
  ::epoch_proto::TearSheet* _internal_mutable_risk_analysis();

  public:
  // .epoch_proto.TearSheet returns_distribution = 3;
  bool has_returns_distribution() const;
  void clear_returns_distribution() ;
  const ::epoch_proto::TearSheet& returns_distribution() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_returns_distribution();
  ::epoch_proto::TearSheet* mutable_returns_distribution();
  void set_allocated_returns_distribution(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_returns_distribution(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_returns_distribution();

  private:
  const ::epoch_proto::TearSheet& _internal_returns_distribution() const;
  ::epoch_proto::TearSheet* _internal_mutable_returns_distribution();

  public:
  // .epoch_proto.TearSheet positions = 4;
  bool has_positions() const;
  void clear_positions() ;
  const ::epoch_proto::TearSheet& positions() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_positions();
  ::epoch_proto::TearSheet* mutable_positions();
  void set_allocated_positions(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_positions(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_positions();

  private:
  const ::epoch_proto::TearSheet& _internal_positions() const;
  ::epoch_proto::TearSheet* _internal_mutable_positions();

  public:
  // .epoch_proto.TearSheet transactions = 5;
  bool has_transactions() const;
  void clear_transactions() ;
  const ::epoch_proto::TearSheet& transactions() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_transactions();
  ::epoch_proto::TearSheet* mutable_transactions();
  void set_allocated_transactions(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_transactions(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_transactions();

  private:
  const ::epoch_proto::TearSheet& _internal_transactions() const;
  ::epoch_proto::TearSheet* _internal_mutable_transactions();

  public:
  // .epoch_proto.TearSheet round_trip = 6;
  bool has_round_trip() const;
  void clear_round_trip() ;
  const ::epoch_proto::TearSheet& round_trip() const;
  PROTOBUF_NODISCARD ::epoch_proto::TearSheet* release_round_trip();
  ::epoch_proto::TearSheet* mutable_round_trip();
  void set_allocated_round_trip(::epoch_proto::TearSheet* value);
  void unsafe_arena_set_allocated_round_trip(::epoch_proto::TearSheet* value);
  ::epoch_proto::TearSheet* unsafe_arena_release_round_trip();

  private:
  const ::epoch_proto::TearSheet& _internal_round_trip() const;
  ::epoch_proto::TearSheet* _internal_mutable_round_trip();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.FullTearSheet)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FullTearSheet& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::TearSheet* strategy_benchmark_;
    ::epoch_proto::TearSheet* risk_analysis_;
    ::epoch_proto::TearSheet* returns_distribution_;
    ::epoch_proto::TearSheet* positions_;
    ::epoch_proto::TearSheet* transactions_;
    ::epoch_proto::TearSheet* round_trip_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tearsheet_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TearSheet

// repeated .epoch_proto.CardDef cards = 1;
inline int TearSheet::_internal_cards_size() const {
  return _internal_cards().size();
}
inline int TearSheet::cards_size() const {
  return _internal_cards_size();
}
inline ::epoch_proto::CardDef* TearSheet::mutable_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.cards)
  return _internal_mutable_cards()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>* TearSheet::mutable_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TearSheet.cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cards();
}
inline const ::epoch_proto::CardDef& TearSheet::cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.cards)
  return _internal_cards().Get(index);
}
inline ::epoch_proto::CardDef* TearSheet::add_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::CardDef* _add = _internal_mutable_cards()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.TearSheet.cards)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>& TearSheet::cards() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.TearSheet.cards)
  return _internal_cards();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>&
TearSheet::_internal_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cards_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::CardDef>*
TearSheet::_internal_mutable_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cards_;
}

// repeated .epoch_proto.Chart charts = 2;
inline int TearSheet::_internal_charts_size() const {
  return _internal_charts().size();
}
inline int TearSheet::charts_size() const {
  return _internal_charts_size();
}
inline ::epoch_proto::Chart* TearSheet::mutable_charts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.charts)
  return _internal_mutable_charts()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>* TearSheet::mutable_charts()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TearSheet.charts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_charts();
}
inline const ::epoch_proto::Chart& TearSheet::charts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.charts)
  return _internal_charts().Get(index);
}
inline ::epoch_proto::Chart* TearSheet::add_charts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Chart* _add = _internal_mutable_charts()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.TearSheet.charts)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>& TearSheet::charts() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.TearSheet.charts)
  return _internal_charts();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>&
TearSheet::_internal_charts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.charts_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Chart>*
TearSheet::_internal_mutable_charts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.charts_;
}

// repeated .epoch_proto.Table tables = 3;
inline int TearSheet::_internal_tables_size() const {
  return _internal_tables().size();
}
inline int TearSheet::tables_size() const {
  return _internal_tables_size();
}
inline ::epoch_proto::Table* TearSheet::mutable_tables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TearSheet.tables)
  return _internal_mutable_tables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>* TearSheet::mutable_tables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TearSheet.tables)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tables();
}
inline const ::epoch_proto::Table& TearSheet::tables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.TearSheet.tables)
  return _internal_tables().Get(index);
}
inline ::epoch_proto::Table* TearSheet::add_tables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Table* _add = _internal_mutable_tables()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.TearSheet.tables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>& TearSheet::tables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.TearSheet.tables)
  return _internal_tables();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>&
TearSheet::_internal_tables() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tables_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Table>*
TearSheet::_internal_mutable_tables() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tables_;
}

// -------------------------------------------------------------------

// FullTearSheet

// .epoch_proto.TearSheet strategy_benchmark = 1;
inline bool FullTearSheet::has_strategy_benchmark() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.strategy_benchmark_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_strategy_benchmark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.strategy_benchmark_ != nullptr) _impl_.strategy_benchmark_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_strategy_benchmark() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.strategy_benchmark_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::strategy_benchmark() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.strategy_benchmark)
  return _internal_strategy_benchmark();
}
inline void FullTearSheet::unsafe_arena_set_allocated_strategy_benchmark(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.strategy_benchmark_);
  }
  _impl_.strategy_benchmark_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.strategy_benchmark)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_strategy_benchmark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::TearSheet* released = _impl_.strategy_benchmark_;
  _impl_.strategy_benchmark_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_strategy_benchmark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.strategy_benchmark)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::TearSheet* temp = _impl_.strategy_benchmark_;
  _impl_.strategy_benchmark_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_strategy_benchmark() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.strategy_benchmark_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.strategy_benchmark_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.strategy_benchmark_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_strategy_benchmark() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_strategy_benchmark();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.strategy_benchmark)
  return _msg;
}
inline void FullTearSheet::set_allocated_strategy_benchmark(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.strategy_benchmark_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.strategy_benchmark_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.strategy_benchmark)
}

// .epoch_proto.TearSheet risk_analysis = 2;
inline bool FullTearSheet::has_risk_analysis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.risk_analysis_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_risk_analysis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.risk_analysis_ != nullptr) _impl_.risk_analysis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_risk_analysis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.risk_analysis_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::risk_analysis() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.risk_analysis)
  return _internal_risk_analysis();
}
inline void FullTearSheet::unsafe_arena_set_allocated_risk_analysis(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.risk_analysis_);
  }
  _impl_.risk_analysis_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.risk_analysis)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_risk_analysis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::TearSheet* released = _impl_.risk_analysis_;
  _impl_.risk_analysis_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_risk_analysis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.risk_analysis)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::TearSheet* temp = _impl_.risk_analysis_;
  _impl_.risk_analysis_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_risk_analysis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.risk_analysis_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.risk_analysis_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.risk_analysis_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_risk_analysis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_risk_analysis();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.risk_analysis)
  return _msg;
}
inline void FullTearSheet::set_allocated_risk_analysis(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.risk_analysis_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.risk_analysis_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.risk_analysis)
}

// .epoch_proto.TearSheet returns_distribution = 3;
inline bool FullTearSheet::has_returns_distribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.returns_distribution_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_returns_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.returns_distribution_ != nullptr) _impl_.returns_distribution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_returns_distribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.returns_distribution_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::returns_distribution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.returns_distribution)
  return _internal_returns_distribution();
}
inline void FullTearSheet::unsafe_arena_set_allocated_returns_distribution(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.returns_distribution_);
  }
  _impl_.returns_distribution_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.returns_distribution)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_returns_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::epoch_proto::TearSheet* released = _impl_.returns_distribution_;
  _impl_.returns_distribution_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_returns_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.returns_distribution)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::epoch_proto::TearSheet* temp = _impl_.returns_distribution_;
  _impl_.returns_distribution_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_returns_distribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.returns_distribution_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.returns_distribution_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.returns_distribution_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_returns_distribution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_returns_distribution();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.returns_distribution)
  return _msg;
}
inline void FullTearSheet::set_allocated_returns_distribution(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.returns_distribution_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.returns_distribution_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.returns_distribution)
}

// .epoch_proto.TearSheet positions = 4;
inline bool FullTearSheet::has_positions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.positions_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.positions_ != nullptr) _impl_.positions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.positions_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::positions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.positions)
  return _internal_positions();
}
inline void FullTearSheet::unsafe_arena_set_allocated_positions(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.positions_);
  }
  _impl_.positions_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.positions)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::epoch_proto::TearSheet* released = _impl_.positions_;
  _impl_.positions_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.positions)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::epoch_proto::TearSheet* temp = _impl_.positions_;
  _impl_.positions_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.positions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.positions_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.positions_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_positions();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.positions)
  return _msg;
}
inline void FullTearSheet::set_allocated_positions(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.positions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.positions_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.positions)
}

// .epoch_proto.TearSheet transactions = 5;
inline bool FullTearSheet::has_transactions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transactions_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transactions_ != nullptr) _impl_.transactions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_transactions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.transactions_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::transactions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.transactions)
  return _internal_transactions();
}
inline void FullTearSheet::unsafe_arena_set_allocated_transactions(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transactions_);
  }
  _impl_.transactions_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.transactions)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::epoch_proto::TearSheet* released = _impl_.transactions_;
  _impl_.transactions_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.transactions)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::epoch_proto::TearSheet* temp = _impl_.transactions_;
  _impl_.transactions_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_transactions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.transactions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.transactions_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.transactions_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_transactions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_transactions();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.transactions)
  return _msg;
}
inline void FullTearSheet::set_allocated_transactions(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.transactions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.transactions_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.transactions)
}

// .epoch_proto.TearSheet round_trip = 6;
inline bool FullTearSheet::has_round_trip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.round_trip_ != nullptr);
  return value;
}
inline void FullTearSheet::clear_round_trip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.round_trip_ != nullptr) _impl_.round_trip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::epoch_proto::TearSheet& FullTearSheet::_internal_round_trip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TearSheet* p = _impl_.round_trip_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TearSheet&>(::epoch_proto::_TearSheet_default_instance_);
}
inline const ::epoch_proto::TearSheet& FullTearSheet::round_trip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.FullTearSheet.round_trip)
  return _internal_round_trip();
}
inline void FullTearSheet::unsafe_arena_set_allocated_round_trip(::epoch_proto::TearSheet* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.round_trip_);
  }
  _impl_.round_trip_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.FullTearSheet.round_trip)
}
inline ::epoch_proto::TearSheet* FullTearSheet::release_round_trip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::epoch_proto::TearSheet* released = _impl_.round_trip_;
  _impl_.round_trip_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TearSheet* FullTearSheet::unsafe_arena_release_round_trip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.FullTearSheet.round_trip)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::epoch_proto::TearSheet* temp = _impl_.round_trip_;
  _impl_.round_trip_ = nullptr;
  return temp;
}
inline ::epoch_proto::TearSheet* FullTearSheet::_internal_mutable_round_trip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.round_trip_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TearSheet>(GetArena());
    _impl_.round_trip_ = reinterpret_cast<::epoch_proto::TearSheet*>(p);
  }
  return _impl_.round_trip_;
}
inline ::epoch_proto::TearSheet* FullTearSheet::mutable_round_trip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::epoch_proto::TearSheet* _msg = _internal_mutable_round_trip();
  // @@protoc_insertion_point(field_mutable:epoch_proto.FullTearSheet.round_trip)
  return _msg;
}
inline void FullTearSheet::set_allocated_round_trip(::epoch_proto::TearSheet* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.round_trip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.round_trip_ = reinterpret_cast<::epoch_proto::TearSheet*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.FullTearSheet.round_trip)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tearsheet_2eproto_2epb_2eh
