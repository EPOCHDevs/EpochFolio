// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: table_def.proto
// Protobuf C++ Version: 5.29.5

#ifndef table_5fdef_2eproto_2epb_2eh
#define table_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_table_5fdef_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_table_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_table_5fdef_2eproto;
namespace epoch_proto {
class CardData;
struct CardDataDefaultTypeInternal;
extern CardDataDefaultTypeInternal _CardData_default_instance_;
class CardDef;
struct CardDefDefaultTypeInternal;
extern CardDefDefaultTypeInternal _CardDef_default_instance_;
class CategoryDef;
struct CategoryDefDefaultTypeInternal;
extern CategoryDefDefaultTypeInternal _CategoryDef_default_instance_;
class ColumnDef;
struct ColumnDefDefaultTypeInternal;
extern ColumnDefDefaultTypeInternal _ColumnDef_default_instance_;
class SubCategoryDef;
struct SubCategoryDefDefaultTypeInternal;
extern SubCategoryDefDefaultTypeInternal _SubCategoryDef_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class TableData;
struct TableDataDefaultTypeInternal;
extern TableDataDefaultTypeInternal _TableData_default_instance_;
class TableRow;
struct TableRowDefaultTypeInternal;
extern TableRowDefaultTypeInternal _TableRow_default_instance_;
}  // namespace epoch_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace epoch_proto {

// ===================================================================


// -------------------------------------------------------------------

class SubCategoryDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.SubCategoryDef) */ {
 public:
  inline SubCategoryDef() : SubCategoryDef(nullptr) {}
  ~SubCategoryDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubCategoryDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubCategoryDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubCategoryDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubCategoryDef(const SubCategoryDef& from) : SubCategoryDef(nullptr, from) {}
  inline SubCategoryDef(SubCategoryDef&& from) noexcept
      : SubCategoryDef(nullptr, std::move(from)) {}
  inline SubCategoryDef& operator=(const SubCategoryDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubCategoryDef& operator=(SubCategoryDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubCategoryDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubCategoryDef* internal_default_instance() {
    return reinterpret_cast<const SubCategoryDef*>(
        &_SubCategoryDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SubCategoryDef& a, SubCategoryDef& b) { a.Swap(&b); }
  inline void Swap(SubCategoryDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubCategoryDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubCategoryDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubCategoryDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubCategoryDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubCategoryDef& from) { SubCategoryDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubCategoryDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.SubCategoryDef"; }

 protected:
  explicit SubCategoryDef(::google::protobuf::Arena* arena);
  SubCategoryDef(::google::protobuf::Arena* arena, const SubCategoryDef& from);
  SubCategoryDef(::google::protobuf::Arena* arena, SubCategoryDef&& from) noexcept
      : SubCategoryDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .epoch_proto.EpochFolioCategory type = 1;
  void clear_type() ;
  ::epoch_proto::EpochFolioCategory type() const;
  void set_type(::epoch_proto::EpochFolioCategory value);

  private:
  ::epoch_proto::EpochFolioCategory _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioCategory value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.SubCategoryDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubCategoryDef& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class ColumnDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.ColumnDef) */ {
 public:
  inline ColumnDef() : ColumnDef(nullptr) {}
  ~ColumnDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ColumnDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ColumnDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ColumnDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline ColumnDef(const ColumnDef& from) : ColumnDef(nullptr, from) {}
  inline ColumnDef(ColumnDef&& from) noexcept
      : ColumnDef(nullptr, std::move(from)) {}
  inline ColumnDef& operator=(const ColumnDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnDef& operator=(ColumnDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnDef* internal_default_instance() {
    return reinterpret_cast<const ColumnDef*>(
        &_ColumnDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ColumnDef& a, ColumnDef& b) { a.Swap(&b); }
  inline void Swap(ColumnDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ColumnDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ColumnDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ColumnDef& from) { ColumnDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ColumnDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.ColumnDef"; }

 protected:
  explicit ColumnDef(::google::protobuf::Arena* arena);
  ColumnDef(::google::protobuf::Arena* arena, const ColumnDef& from);
  ColumnDef(::google::protobuf::Arena* arena, ColumnDef&& from) noexcept
      : ColumnDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .epoch_proto.EpochFolioType type = 3;
  void clear_type() ;
  ::epoch_proto::EpochFolioType type() const;
  void set_type(::epoch_proto::EpochFolioType value);

  private:
  ::epoch_proto::EpochFolioType _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioType value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.ColumnDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ColumnDef& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class TableRow final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.TableRow) */ {
 public:
  inline TableRow() : TableRow(nullptr) {}
  ~TableRow() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TableRow* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TableRow));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TableRow(
      ::google::protobuf::internal::ConstantInitialized);

  inline TableRow(const TableRow& from) : TableRow(nullptr, from) {}
  inline TableRow(TableRow&& from) noexcept
      : TableRow(nullptr, std::move(from)) {}
  inline TableRow& operator=(const TableRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableRow& operator=(TableRow&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableRow* internal_default_instance() {
    return reinterpret_cast<const TableRow*>(
        &_TableRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TableRow& a, TableRow& b) { a.Swap(&b); }
  inline void Swap(TableRow* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableRow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableRow* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TableRow>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TableRow& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TableRow& from) { TableRow::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TableRow* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.TableRow"; }

 protected:
  explicit TableRow(::google::protobuf::Arena* arena);
  TableRow(::google::protobuf::Arena* arena, const TableRow& from);
  TableRow(::google::protobuf::Arena* arena, TableRow&& from) noexcept
      : TableRow(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .epoch_proto.Scalar values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::epoch_proto::Scalar* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* _internal_mutable_values();
  public:
  const ::epoch_proto::Scalar& values(int index) const;
  ::epoch_proto::Scalar* add_values();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& values() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.TableRow)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TableRow& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Scalar > values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class CategoryDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.CategoryDef) */ {
 public:
  inline CategoryDef() : CategoryDef(nullptr) {}
  ~CategoryDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CategoryDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CategoryDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CategoryDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline CategoryDef(const CategoryDef& from) : CategoryDef(nullptr, from) {}
  inline CategoryDef(CategoryDef&& from) noexcept
      : CategoryDef(nullptr, std::move(from)) {}
  inline CategoryDef& operator=(const CategoryDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoryDef& operator=(CategoryDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoryDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoryDef* internal_default_instance() {
    return reinterpret_cast<const CategoryDef*>(
        &_CategoryDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CategoryDef& a, CategoryDef& b) { a.Swap(&b); }
  inline void Swap(CategoryDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoryDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoryDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CategoryDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CategoryDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CategoryDef& from) { CategoryDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CategoryDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.CategoryDef"; }

 protected:
  explicit CategoryDef(::google::protobuf::Arena* arena);
  CategoryDef(::google::protobuf::Arena* arena, const CategoryDef& from);
  CategoryDef(::google::protobuf::Arena* arena, CategoryDef&& from) noexcept
      : CategoryDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubCategoriesFieldNumber = 3,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .epoch_proto.SubCategoryDef sub_categories = 3;
  int sub_categories_size() const;
  private:
  int _internal_sub_categories_size() const;

  public:
  void clear_sub_categories() ;
  ::epoch_proto::SubCategoryDef* mutable_sub_categories(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>* mutable_sub_categories();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>& _internal_sub_categories() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>* _internal_mutable_sub_categories();
  public:
  const ::epoch_proto::SubCategoryDef& sub_categories(int index) const;
  ::epoch_proto::SubCategoryDef* add_sub_categories();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>& sub_categories() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .epoch_proto.EpochFolioCategory type = 1;
  void clear_type() ;
  ::epoch_proto::EpochFolioCategory type() const;
  void set_type(::epoch_proto::EpochFolioCategory value);

  private:
  ::epoch_proto::EpochFolioCategory _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioCategory value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.CategoryDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CategoryDef& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::SubCategoryDef > sub_categories_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class CardData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.CardData) */ {
 public:
  inline CardData() : CardData(nullptr) {}
  ~CardData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CardData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CardData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CardData(
      ::google::protobuf::internal::ConstantInitialized);

  inline CardData(const CardData& from) : CardData(nullptr, from) {}
  inline CardData(CardData&& from) noexcept
      : CardData(nullptr, std::move(from)) {}
  inline CardData& operator=(const CardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardData& operator=(CardData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardData* internal_default_instance() {
    return reinterpret_cast<const CardData*>(
        &_CardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CardData& a, CardData& b) { a.Swap(&b); }
  inline void Swap(CardData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CardData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CardData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CardData& from) { CardData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CardData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.CardData"; }

 protected:
  explicit CardData(::google::protobuf::Arena* arena);
  CardData(::google::protobuf::Arena* arena, const CardData& from);
  CardData(::google::protobuf::Arena* arena, CardData&& from) noexcept
      : CardData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kValueFieldNumber = 2,
    kGroupFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .epoch_proto.Scalar value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::epoch_proto::Scalar& value() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_value();
  ::epoch_proto::Scalar* mutable_value();
  void set_allocated_value(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_value();

  private:
  const ::epoch_proto::Scalar& _internal_value() const;
  ::epoch_proto::Scalar* _internal_mutable_value();

  public:
  // uint64 group = 4;
  void clear_group() ;
  ::uint64_t group() const;
  void set_group(::uint64_t value);

  private:
  ::uint64_t _internal_group() const;
  void _internal_set_group(::uint64_t value);

  public:
  // .epoch_proto.EpochFolioType type = 3;
  void clear_type() ;
  ::epoch_proto::EpochFolioType type() const;
  void set_type(::epoch_proto::EpochFolioType value);

  private:
  ::epoch_proto::EpochFolioType _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioType value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.CardData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CardData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::epoch_proto::Scalar* value_;
    ::uint64_t group_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class TableData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.TableData) */ {
 public:
  inline TableData() : TableData(nullptr) {}
  ~TableData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TableData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TableData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TableData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TableData(const TableData& from) : TableData(nullptr, from) {}
  inline TableData(TableData&& from) noexcept
      : TableData(nullptr, std::move(from)) {}
  inline TableData& operator=(const TableData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableData& operator=(TableData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableData* internal_default_instance() {
    return reinterpret_cast<const TableData*>(
        &_TableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TableData& a, TableData& b) { a.Swap(&b); }
  inline void Swap(TableData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TableData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TableData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TableData& from) { TableData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TableData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.TableData"; }

 protected:
  explicit TableData(::google::protobuf::Arena* arena);
  TableData(::google::protobuf::Arena* arena, const TableData& from);
  TableData(::google::protobuf::Arena* arena, TableData&& from) noexcept
      : TableData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .epoch_proto.TableRow rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;

  public:
  void clear_rows() ;
  ::epoch_proto::TableRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>* mutable_rows();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>& _internal_rows() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>* _internal_mutable_rows();
  public:
  const ::epoch_proto::TableRow& rows(int index) const;
  ::epoch_proto::TableRow* add_rows();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>& rows() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.TableData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TableData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::TableRow > rows_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class CardDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.CardDef) */ {
 public:
  inline CardDef() : CardDef(nullptr) {}
  ~CardDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CardDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CardDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CardDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline CardDef(const CardDef& from) : CardDef(nullptr, from) {}
  inline CardDef(CardDef&& from) noexcept
      : CardDef(nullptr, std::move(from)) {}
  inline CardDef& operator=(const CardDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardDef& operator=(CardDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardDef* internal_default_instance() {
    return reinterpret_cast<const CardDef*>(
        &_CardDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CardDef& a, CardDef& b) { a.Swap(&b); }
  inline void Swap(CardDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CardDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CardDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CardDef& from) { CardDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CardDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.CardDef"; }

 protected:
  explicit CardDef(::google::protobuf::Arena* arena);
  CardDef(::google::protobuf::Arena* arena, const CardDef& from);
  CardDef(::google::protobuf::Arena* arena, CardDef&& from) noexcept
      : CardDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 3,
    kTypeFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kGroupSizeFieldNumber = 4,
  };
  // repeated .epoch_proto.CardData data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::epoch_proto::CardData* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>* _internal_mutable_data();
  public:
  const ::epoch_proto::CardData& data(int index) const;
  ::epoch_proto::CardData* add_data();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>& data() const;
  // .epoch_proto.EpochFolioDashboardWidget type = 1;
  void clear_type() ;
  ::epoch_proto::EpochFolioDashboardWidget type() const;
  void set_type(::epoch_proto::EpochFolioDashboardWidget value);

  private:
  ::epoch_proto::EpochFolioDashboardWidget _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioDashboardWidget value);

  public:
  // .epoch_proto.EpochFolioCategory category = 2;
  void clear_category() ;
  ::epoch_proto::EpochFolioCategory category() const;
  void set_category(::epoch_proto::EpochFolioCategory value);

  private:
  ::epoch_proto::EpochFolioCategory _internal_category() const;
  void _internal_set_category(::epoch_proto::EpochFolioCategory value);

  public:
  // uint64 group_size = 4;
  void clear_group_size() ;
  ::uint64_t group_size() const;
  void set_group_size(::uint64_t value);

  private:
  ::uint64_t _internal_group_size() const;
  void _internal_set_group_size(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.CardDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CardDef& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::CardData > data_;
    int type_;
    int category_;
    ::uint64_t group_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Table final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Table* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Table));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Table(
      ::google::protobuf::internal::ConstantInitialized);

  inline Table(const Table& from) : Table(nullptr, from) {}
  inline Table(Table&& from) noexcept
      : Table(nullptr, std::move(from)) {}
  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
        &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Table& a, Table& b) { a.Swap(&b); }
  inline void Swap(Table* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Table>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Table& from) { Table::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Table* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Table"; }

 protected:
  explicit Table(::google::protobuf::Arena* arena);
  Table(::google::protobuf::Arena* arena, const Table& from);
  Table(::google::protobuf::Arena* arena, Table&& from) noexcept
      : Table(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kColumnsFieldNumber = 4,
    kTitleFieldNumber = 3,
    kDataFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCategoryFieldNumber = 2,
  };
  // repeated .epoch_proto.ColumnDef columns = 4;
  int columns_size() const;
  private:
  int _internal_columns_size() const;

  public:
  void clear_columns() ;
  ::epoch_proto::ColumnDef* mutable_columns(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>* mutable_columns();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>& _internal_columns() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>* _internal_mutable_columns();
  public:
  const ::epoch_proto::ColumnDef& columns(int index) const;
  ::epoch_proto::ColumnDef* add_columns();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>& columns() const;
  // string title = 3;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .epoch_proto.TableData data = 5;
  bool has_data() const;
  void clear_data() ;
  const ::epoch_proto::TableData& data() const;
  PROTOBUF_NODISCARD ::epoch_proto::TableData* release_data();
  ::epoch_proto::TableData* mutable_data();
  void set_allocated_data(::epoch_proto::TableData* value);
  void unsafe_arena_set_allocated_data(::epoch_proto::TableData* value);
  ::epoch_proto::TableData* unsafe_arena_release_data();

  private:
  const ::epoch_proto::TableData& _internal_data() const;
  ::epoch_proto::TableData* _internal_mutable_data();

  public:
  // .epoch_proto.EpochFolioDashboardWidget type = 1;
  void clear_type() ;
  ::epoch_proto::EpochFolioDashboardWidget type() const;
  void set_type(::epoch_proto::EpochFolioDashboardWidget value);

  private:
  ::epoch_proto::EpochFolioDashboardWidget _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioDashboardWidget value);

  public:
  // .epoch_proto.EpochFolioCategory category = 2;
  void clear_category() ;
  ::epoch_proto::EpochFolioCategory category() const;
  void set_category(::epoch_proto::EpochFolioCategory value);

  private:
  ::epoch_proto::EpochFolioCategory _internal_category() const;
  void _internal_set_category(::epoch_proto::EpochFolioCategory value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.Table)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Table& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::ColumnDef > columns_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::epoch_proto::TableData* data_;
    int type_;
    int category_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_table_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SubCategoryDef

// .epoch_proto.EpochFolioCategory type = 1;
inline void SubCategoryDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioCategory SubCategoryDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.SubCategoryDef.type)
  return _internal_type();
}
inline void SubCategoryDef::set_type(::epoch_proto::EpochFolioCategory value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.SubCategoryDef.type)
}
inline ::epoch_proto::EpochFolioCategory SubCategoryDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioCategory>(_impl_.type_);
}
inline void SubCategoryDef::_internal_set_type(::epoch_proto::EpochFolioCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string name = 2;
inline void SubCategoryDef::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SubCategoryDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.SubCategoryDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubCategoryDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.SubCategoryDef.name)
}
inline std::string* SubCategoryDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.SubCategoryDef.name)
  return _s;
}
inline const std::string& SubCategoryDef::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SubCategoryDef::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SubCategoryDef::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SubCategoryDef::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.SubCategoryDef.name)
  return _impl_.name_.Release();
}
inline void SubCategoryDef::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.SubCategoryDef.name)
}

// -------------------------------------------------------------------

// CategoryDef

// .epoch_proto.EpochFolioCategory type = 1;
inline void CategoryDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioCategory CategoryDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CategoryDef.type)
  return _internal_type();
}
inline void CategoryDef::set_type(::epoch_proto::EpochFolioCategory value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CategoryDef.type)
}
inline ::epoch_proto::EpochFolioCategory CategoryDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioCategory>(_impl_.type_);
}
inline void CategoryDef::_internal_set_type(::epoch_proto::EpochFolioCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string name = 2;
inline void CategoryDef::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CategoryDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.CategoryDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CategoryDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.CategoryDef.name)
}
inline std::string* CategoryDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CategoryDef.name)
  return _s;
}
inline const std::string& CategoryDef::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void CategoryDef::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CategoryDef::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CategoryDef::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.CategoryDef.name)
  return _impl_.name_.Release();
}
inline void CategoryDef::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CategoryDef.name)
}

// repeated .epoch_proto.SubCategoryDef sub_categories = 3;
inline int CategoryDef::_internal_sub_categories_size() const {
  return _internal_sub_categories().size();
}
inline int CategoryDef::sub_categories_size() const {
  return _internal_sub_categories_size();
}
inline void CategoryDef::clear_sub_categories() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sub_categories_.Clear();
}
inline ::epoch_proto::SubCategoryDef* CategoryDef::mutable_sub_categories(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.CategoryDef.sub_categories)
  return _internal_mutable_sub_categories()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>* CategoryDef::mutable_sub_categories()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.CategoryDef.sub_categories)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sub_categories();
}
inline const ::epoch_proto::SubCategoryDef& CategoryDef::sub_categories(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.CategoryDef.sub_categories)
  return _internal_sub_categories().Get(index);
}
inline ::epoch_proto::SubCategoryDef* CategoryDef::add_sub_categories() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::SubCategoryDef* _add = _internal_mutable_sub_categories()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.CategoryDef.sub_categories)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>& CategoryDef::sub_categories() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.CategoryDef.sub_categories)
  return _internal_sub_categories();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>&
CategoryDef::_internal_sub_categories() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sub_categories_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::SubCategoryDef>*
CategoryDef::_internal_mutable_sub_categories() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sub_categories_;
}

// -------------------------------------------------------------------

// ColumnDef

// string id = 1;
inline void ColumnDef::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ColumnDef::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColumnDef::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.id)
}
inline std::string* ColumnDef::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ColumnDef.id)
  return _s;
}
inline const std::string& ColumnDef::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ColumnDef::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ColumnDef::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ColumnDef::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ColumnDef.id)
  return _impl_.id_.Release();
}
inline void ColumnDef::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ColumnDef.id)
}

// string name = 2;
inline void ColumnDef::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ColumnDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ColumnDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.name)
}
inline std::string* ColumnDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ColumnDef.name)
  return _s;
}
inline const std::string& ColumnDef::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ColumnDef::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ColumnDef::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ColumnDef::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ColumnDef.name)
  return _impl_.name_.Release();
}
inline void ColumnDef::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ColumnDef.name)
}

// .epoch_proto.EpochFolioType type = 3;
inline void ColumnDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioType ColumnDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.ColumnDef.type)
  return _internal_type();
}
inline void ColumnDef::set_type(::epoch_proto::EpochFolioType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.ColumnDef.type)
}
inline ::epoch_proto::EpochFolioType ColumnDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioType>(_impl_.type_);
}
inline void ColumnDef::_internal_set_type(::epoch_proto::EpochFolioType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// TableRow

// repeated .epoch_proto.Scalar values = 1;
inline int TableRow::_internal_values_size() const {
  return _internal_values().size();
}
inline int TableRow::values_size() const {
  return _internal_values_size();
}
inline ::epoch_proto::Scalar* TableRow::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TableRow.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* TableRow::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TableRow.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::epoch_proto::Scalar& TableRow::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.TableRow.values)
  return _internal_values().Get(index);
}
inline ::epoch_proto::Scalar* TableRow::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Scalar* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.TableRow.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& TableRow::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.TableRow.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>&
TableRow::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>*
TableRow::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// TableData

// repeated .epoch_proto.TableRow rows = 1;
inline int TableData::_internal_rows_size() const {
  return _internal_rows().size();
}
inline int TableData::rows_size() const {
  return _internal_rows_size();
}
inline void TableData::clear_rows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_.Clear();
}
inline ::epoch_proto::TableRow* TableData::mutable_rows(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.TableData.rows)
  return _internal_mutable_rows()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>* TableData::mutable_rows()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.TableData.rows)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rows();
}
inline const ::epoch_proto::TableRow& TableData::rows(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.TableData.rows)
  return _internal_rows().Get(index);
}
inline ::epoch_proto::TableRow* TableData::add_rows() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::TableRow* _add = _internal_mutable_rows()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.TableData.rows)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>& TableData::rows() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.TableData.rows)
  return _internal_rows();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>&
TableData::_internal_rows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rows_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::TableRow>*
TableData::_internal_mutable_rows() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rows_;
}

// -------------------------------------------------------------------

// Table

// .epoch_proto.EpochFolioDashboardWidget type = 1;
inline void Table::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioDashboardWidget Table::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.type)
  return _internal_type();
}
inline void Table::set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Table.type)
}
inline ::epoch_proto::EpochFolioDashboardWidget Table::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioDashboardWidget>(_impl_.type_);
}
inline void Table::_internal_set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .epoch_proto.EpochFolioCategory category = 2;
inline void Table::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::epoch_proto::EpochFolioCategory Table::category() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.category)
  return _internal_category();
}
inline void Table::set_category(::epoch_proto::EpochFolioCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:epoch_proto.Table.category)
}
inline ::epoch_proto::EpochFolioCategory Table::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioCategory>(_impl_.category_);
}
inline void Table::_internal_set_category(::epoch_proto::EpochFolioCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// string title = 3;
inline void Table::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Table::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Table::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.Table.title)
}
inline std::string* Table::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.title)
  return _s;
}
inline const std::string& Table::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void Table::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* Table::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* Table::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Table.title)
  return _impl_.title_.Release();
}
inline void Table::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Table.title)
}

// repeated .epoch_proto.ColumnDef columns = 4;
inline int Table::_internal_columns_size() const {
  return _internal_columns().size();
}
inline int Table::columns_size() const {
  return _internal_columns_size();
}
inline void Table::clear_columns() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.columns_.Clear();
}
inline ::epoch_proto::ColumnDef* Table::mutable_columns(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.columns)
  return _internal_mutable_columns()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>* Table::mutable_columns()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.Table.columns)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_columns();
}
inline const ::epoch_proto::ColumnDef& Table::columns(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.columns)
  return _internal_columns().Get(index);
}
inline ::epoch_proto::ColumnDef* Table::add_columns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::ColumnDef* _add = _internal_mutable_columns()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.Table.columns)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>& Table::columns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.Table.columns)
  return _internal_columns();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>&
Table::_internal_columns() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.columns_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::ColumnDef>*
Table::_internal_mutable_columns() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.columns_;
}

// .epoch_proto.TableData data = 5;
inline bool Table::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void Table::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::TableData& Table::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::TableData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::TableData&>(::epoch_proto::_TableData_default_instance_);
}
inline const ::epoch_proto::TableData& Table::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Table.data)
  return _internal_data();
}
inline void Table::unsafe_arena_set_allocated_data(::epoch_proto::TableData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::epoch_proto::TableData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Table.data)
}
inline ::epoch_proto::TableData* Table::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::TableData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::TableData* Table::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Table.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::TableData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::epoch_proto::TableData* Table::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::TableData>(GetArena());
    _impl_.data_ = reinterpret_cast<::epoch_proto::TableData*>(p);
  }
  return _impl_.data_;
}
inline ::epoch_proto::TableData* Table::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::TableData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Table.data)
  return _msg;
}
inline void Table::set_allocated_data(::epoch_proto::TableData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::epoch_proto::TableData*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Table.data)
}

// -------------------------------------------------------------------

// CardData

// string title = 1;
inline void CardData::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CardData::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CardData::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.title)
}
inline std::string* CardData::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardData.title)
  return _s;
}
inline const std::string& CardData::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void CardData::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* CardData::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* CardData::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.CardData.title)
  return _impl_.title_.Release();
}
inline void CardData::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CardData.title)
}

// .epoch_proto.Scalar value = 2;
inline bool CardData::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& CardData::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& CardData::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.value)
  return _internal_value();
}
inline void CardData::unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.CardData.value)
}
inline ::epoch_proto::Scalar* CardData::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.value_;
  _impl_.value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* CardData::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.CardData.value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* CardData::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.value_;
}
inline ::epoch_proto::Scalar* CardData::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardData.value)
  return _msg;
}
inline void CardData::set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.CardData.value)
}

// .epoch_proto.EpochFolioType type = 3;
inline void CardData::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioType CardData::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.type)
  return _internal_type();
}
inline void CardData::set_type(::epoch_proto::EpochFolioType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.type)
}
inline ::epoch_proto::EpochFolioType CardData::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioType>(_impl_.type_);
}
inline void CardData::_internal_set_type(::epoch_proto::EpochFolioType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// uint64 group = 4;
inline void CardData::clear_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_ = ::uint64_t{0u};
}
inline ::uint64_t CardData::group() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardData.group)
  return _internal_group();
}
inline void CardData::set_group(::uint64_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardData.group)
}
inline ::uint64_t CardData::_internal_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_;
}
inline void CardData::_internal_set_group(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_ = value;
}

// -------------------------------------------------------------------

// CardDef

// .epoch_proto.EpochFolioDashboardWidget type = 1;
inline void CardDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioDashboardWidget CardDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.type)
  return _internal_type();
}
inline void CardDef::set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.type)
}
inline ::epoch_proto::EpochFolioDashboardWidget CardDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioDashboardWidget>(_impl_.type_);
}
inline void CardDef::_internal_set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .epoch_proto.EpochFolioCategory category = 2;
inline void CardDef::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::epoch_proto::EpochFolioCategory CardDef::category() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.category)
  return _internal_category();
}
inline void CardDef::set_category(::epoch_proto::EpochFolioCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.category)
}
inline ::epoch_proto::EpochFolioCategory CardDef::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioCategory>(_impl_.category_);
}
inline void CardDef::_internal_set_category(::epoch_proto::EpochFolioCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// repeated .epoch_proto.CardData data = 3;
inline int CardDef::_internal_data_size() const {
  return _internal_data().size();
}
inline int CardDef::data_size() const {
  return _internal_data_size();
}
inline void CardDef::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::epoch_proto::CardData* CardDef::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.CardDef.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>* CardDef::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.CardDef.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::epoch_proto::CardData& CardDef::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.data)
  return _internal_data().Get(index);
}
inline ::epoch_proto::CardData* CardDef::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::CardData* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.CardDef.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>& CardDef::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.CardDef.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>&
CardDef::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::CardData>*
CardDef::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// uint64 group_size = 4;
inline void CardDef::clear_group_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_size_ = ::uint64_t{0u};
}
inline ::uint64_t CardDef::group_size() const {
  // @@protoc_insertion_point(field_get:epoch_proto.CardDef.group_size)
  return _internal_group_size();
}
inline void CardDef::set_group_size(::uint64_t value) {
  _internal_set_group_size(value);
  // @@protoc_insertion_point(field_set:epoch_proto.CardDef.group_size)
}
inline ::uint64_t CardDef::_internal_group_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_size_;
}
inline void CardDef::_internal_set_group_size(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // table_5fdef_2eproto_2epb_2eh
