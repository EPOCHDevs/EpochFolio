// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chart_def.proto
// Protobuf C++ Version: 5.29.5

#ifndef chart_5fdef_2eproto_2epb_2eh
#define chart_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chart_5fdef_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chart_5fdef_2eproto;
namespace epoch_proto {
class AxisDef;
struct AxisDefDefaultTypeInternal;
extern AxisDefDefaultTypeInternal _AxisDef_default_instance_;
class Band;
struct BandDefaultTypeInternal;
extern BandDefaultTypeInternal _Band_default_instance_;
class BarDef;
struct BarDefDefaultTypeInternal;
extern BarDefDefaultTypeInternal _BarDef_default_instance_;
class BoxPlotDataPoint;
struct BoxPlotDataPointDefaultTypeInternal;
extern BoxPlotDataPointDefaultTypeInternal _BoxPlotDataPoint_default_instance_;
class BoxPlotDataPointDef;
struct BoxPlotDataPointDefDefaultTypeInternal;
extern BoxPlotDataPointDefDefaultTypeInternal _BoxPlotDataPointDef_default_instance_;
class BoxPlotDef;
struct BoxPlotDefDefaultTypeInternal;
extern BoxPlotDefDefaultTypeInternal _BoxPlotDef_default_instance_;
class BoxPlotOutlier;
struct BoxPlotOutlierDefaultTypeInternal;
extern BoxPlotOutlierDefaultTypeInternal _BoxPlotOutlier_default_instance_;
class Chart;
struct ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class ChartDef;
struct ChartDefDefaultTypeInternal;
extern ChartDefDefaultTypeInternal _ChartDef_default_instance_;
class HeatMapDef;
struct HeatMapDefDefaultTypeInternal;
extern HeatMapDefDefaultTypeInternal _HeatMapDef_default_instance_;
class HeatMapPoint;
struct HeatMapPointDefaultTypeInternal;
extern HeatMapPointDefaultTypeInternal _HeatMapPoint_default_instance_;
class HistogramDef;
struct HistogramDefDefaultTypeInternal;
extern HistogramDefDefaultTypeInternal _HistogramDef_default_instance_;
class Line;
struct LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class LinesDef;
struct LinesDefDefaultTypeInternal;
extern LinesDefDefaultTypeInternal _LinesDef_default_instance_;
class PieData;
struct PieDataDefaultTypeInternal;
extern PieDataDefaultTypeInternal _PieData_default_instance_;
class PieDataDef;
struct PieDataDefDefaultTypeInternal;
extern PieDataDefDefaultTypeInternal _PieDataDef_default_instance_;
class PieDef;
struct PieDefDefaultTypeInternal;
extern PieDefDefaultTypeInternal _PieDef_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class StraightLineDef;
struct StraightLineDefDefaultTypeInternal;
extern StraightLineDefDefaultTypeInternal _StraightLineDef_default_instance_;
class XRangeDef;
struct XRangeDefDefaultTypeInternal;
extern XRangeDefDefaultTypeInternal _XRangeDef_default_instance_;
class XRangePoint;
struct XRangePointDefaultTypeInternal;
extern XRangePointDefaultTypeInternal _XRangePoint_default_instance_;
}  // namespace epoch_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace epoch_proto {

// ===================================================================


// -------------------------------------------------------------------

class BoxPlotOutlier final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.BoxPlotOutlier) */ {
 public:
  inline BoxPlotOutlier() : BoxPlotOutlier(nullptr) {}
  ~BoxPlotOutlier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BoxPlotOutlier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BoxPlotOutlier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BoxPlotOutlier(
      ::google::protobuf::internal::ConstantInitialized);

  inline BoxPlotOutlier(const BoxPlotOutlier& from) : BoxPlotOutlier(nullptr, from) {}
  inline BoxPlotOutlier(BoxPlotOutlier&& from) noexcept
      : BoxPlotOutlier(nullptr, std::move(from)) {}
  inline BoxPlotOutlier& operator=(const BoxPlotOutlier& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxPlotOutlier& operator=(BoxPlotOutlier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxPlotOutlier& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxPlotOutlier* internal_default_instance() {
    return reinterpret_cast<const BoxPlotOutlier*>(
        &_BoxPlotOutlier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(BoxPlotOutlier& a, BoxPlotOutlier& b) { a.Swap(&b); }
  inline void Swap(BoxPlotOutlier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxPlotOutlier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxPlotOutlier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BoxPlotOutlier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoxPlotOutlier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BoxPlotOutlier& from) { BoxPlotOutlier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BoxPlotOutlier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.BoxPlotOutlier"; }

 protected:
  explicit BoxPlotOutlier(::google::protobuf::Arena* arena);
  BoxPlotOutlier(::google::protobuf::Arena* arena, const BoxPlotOutlier& from);
  BoxPlotOutlier(::google::protobuf::Arena* arena, BoxPlotOutlier&& from) noexcept
      : BoxPlotOutlier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCategoryIndexFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint64 category_index = 1;
  void clear_category_index() ;
  ::uint64_t category_index() const;
  void set_category_index(::uint64_t value);

  private:
  ::uint64_t _internal_category_index() const;
  void _internal_set_category_index(::uint64_t value);

  public:
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.BoxPlotOutlier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BoxPlotOutlier& from_msg);
    ::uint64_t category_index_;
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class BoxPlotDataPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.BoxPlotDataPoint) */ {
 public:
  inline BoxPlotDataPoint() : BoxPlotDataPoint(nullptr) {}
  ~BoxPlotDataPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BoxPlotDataPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BoxPlotDataPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BoxPlotDataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline BoxPlotDataPoint(const BoxPlotDataPoint& from) : BoxPlotDataPoint(nullptr, from) {}
  inline BoxPlotDataPoint(BoxPlotDataPoint&& from) noexcept
      : BoxPlotDataPoint(nullptr, std::move(from)) {}
  inline BoxPlotDataPoint& operator=(const BoxPlotDataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxPlotDataPoint& operator=(BoxPlotDataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxPlotDataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxPlotDataPoint* internal_default_instance() {
    return reinterpret_cast<const BoxPlotDataPoint*>(
        &_BoxPlotDataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(BoxPlotDataPoint& a, BoxPlotDataPoint& b) { a.Swap(&b); }
  inline void Swap(BoxPlotDataPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxPlotDataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxPlotDataPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BoxPlotDataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoxPlotDataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BoxPlotDataPoint& from) { BoxPlotDataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BoxPlotDataPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.BoxPlotDataPoint"; }

 protected:
  explicit BoxPlotDataPoint(::google::protobuf::Arena* arena);
  BoxPlotDataPoint(::google::protobuf::Arena* arena, const BoxPlotDataPoint& from);
  BoxPlotDataPoint(::google::protobuf::Arena* arena, BoxPlotDataPoint&& from) noexcept
      : BoxPlotDataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLowFieldNumber = 1,
    kQ1FieldNumber = 2,
    kMedianFieldNumber = 3,
    kQ3FieldNumber = 4,
    kHighFieldNumber = 5,
  };
  // double low = 1;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double q1 = 2;
  void clear_q1() ;
  double q1() const;
  void set_q1(double value);

  private:
  double _internal_q1() const;
  void _internal_set_q1(double value);

  public:
  // double median = 3;
  void clear_median() ;
  double median() const;
  void set_median(double value);

  private:
  double _internal_median() const;
  void _internal_set_median(double value);

  public:
  // double q3 = 4;
  void clear_q3() ;
  double q3() const;
  void set_q3(double value);

  private:
  double _internal_q3() const;
  void _internal_set_q3(double value);

  public:
  // double high = 5;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.BoxPlotDataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BoxPlotDataPoint& from_msg);
    double low_;
    double q1_;
    double median_;
    double q3_;
    double high_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class AxisDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.AxisDef) */ {
 public:
  inline AxisDef() : AxisDef(nullptr) {}
  ~AxisDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AxisDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AxisDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AxisDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline AxisDef(const AxisDef& from) : AxisDef(nullptr, from) {}
  inline AxisDef(AxisDef&& from) noexcept
      : AxisDef(nullptr, std::move(from)) {}
  inline AxisDef& operator=(const AxisDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxisDef& operator=(AxisDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AxisDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const AxisDef* internal_default_instance() {
    return reinterpret_cast<const AxisDef*>(
        &_AxisDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AxisDef& a, AxisDef& b) { a.Swap(&b); }
  inline void Swap(AxisDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AxisDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AxisDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AxisDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AxisDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AxisDef& from) { AxisDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AxisDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.AxisDef"; }

 protected:
  explicit AxisDef(::google::protobuf::Arena* arena);
  AxisDef(::google::protobuf::Arena* arena, const AxisDef& from);
  AxisDef(::google::protobuf::Arena* arena, AxisDef&& from) noexcept
      : AxisDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCategoriesFieldNumber = 3,
    kLabelFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated string categories = 3;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_categories(int index, Arg_&& value, Args_... args);
  std::string* add_categories();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_categories(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& categories() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_categories();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_categories() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_categories();

  public:
  // optional string label = 2;
  bool has_label() const;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // optional .epoch_proto.AxisType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::epoch_proto::AxisType type() const;
  void set_type(::epoch_proto::AxisType value);

  private:
  ::epoch_proto::AxisType _internal_type() const;
  void _internal_set_type(::epoch_proto::AxisType value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.AxisDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AxisDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> categories_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class XRangePoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.XRangePoint) */ {
 public:
  inline XRangePoint() : XRangePoint(nullptr) {}
  ~XRangePoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(XRangePoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(XRangePoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR XRangePoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline XRangePoint(const XRangePoint& from) : XRangePoint(nullptr, from) {}
  inline XRangePoint(XRangePoint&& from) noexcept
      : XRangePoint(nullptr, std::move(from)) {}
  inline XRangePoint& operator=(const XRangePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline XRangePoint& operator=(XRangePoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XRangePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const XRangePoint* internal_default_instance() {
    return reinterpret_cast<const XRangePoint*>(
        &_XRangePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(XRangePoint& a, XRangePoint& b) { a.Swap(&b); }
  inline void Swap(XRangePoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XRangePoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XRangePoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<XRangePoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XRangePoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const XRangePoint& from) { XRangePoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(XRangePoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.XRangePoint"; }

 protected:
  explicit XRangePoint(::google::protobuf::Arena* arena);
  XRangePoint(::google::protobuf::Arena* arena, const XRangePoint& from);
  XRangePoint(::google::protobuf::Arena* arena, XRangePoint&& from) noexcept
      : XRangePoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kX2FieldNumber = 2,
    kYFieldNumber = 3,
    kIsLongFieldNumber = 4,
  };
  // .epoch_proto.Scalar x = 1;
  bool has_x() const;
  void clear_x() ;
  const ::epoch_proto::Scalar& x() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_x();
  ::epoch_proto::Scalar* mutable_x();
  void set_allocated_x(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_x();

  private:
  const ::epoch_proto::Scalar& _internal_x() const;
  ::epoch_proto::Scalar* _internal_mutable_x();

  public:
  // .epoch_proto.Scalar x2 = 2;
  bool has_x2() const;
  void clear_x2() ;
  const ::epoch_proto::Scalar& x2() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_x2();
  ::epoch_proto::Scalar* mutable_x2();
  void set_allocated_x2(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_x2(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_x2();

  private:
  const ::epoch_proto::Scalar& _internal_x2() const;
  ::epoch_proto::Scalar* _internal_mutable_x2();

  public:
  // uint64 y = 3;
  void clear_y() ;
  ::uint64_t y() const;
  void set_y(::uint64_t value);

  private:
  ::uint64_t _internal_y() const;
  void _internal_set_y(::uint64_t value);

  public:
  // bool is_long = 4;
  void clear_is_long() ;
  bool is_long() const;
  void set_is_long(bool value);

  private:
  bool _internal_is_long() const;
  void _internal_set_is_long(bool value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.XRangePoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const XRangePoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::Scalar* x_;
    ::epoch_proto::Scalar* x2_;
    ::uint64_t y_;
    bool is_long_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class StraightLineDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.StraightLineDef) */ {
 public:
  inline StraightLineDef() : StraightLineDef(nullptr) {}
  ~StraightLineDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StraightLineDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StraightLineDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StraightLineDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline StraightLineDef(const StraightLineDef& from) : StraightLineDef(nullptr, from) {}
  inline StraightLineDef(StraightLineDef&& from) noexcept
      : StraightLineDef(nullptr, std::move(from)) {}
  inline StraightLineDef& operator=(const StraightLineDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline StraightLineDef& operator=(StraightLineDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StraightLineDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const StraightLineDef* internal_default_instance() {
    return reinterpret_cast<const StraightLineDef*>(
        &_StraightLineDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StraightLineDef& a, StraightLineDef& b) { a.Swap(&b); }
  inline void Swap(StraightLineDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StraightLineDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StraightLineDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StraightLineDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StraightLineDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StraightLineDef& from) { StraightLineDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StraightLineDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.StraightLineDef"; }

 protected:
  explicit StraightLineDef(::google::protobuf::Arena* arena);
  StraightLineDef(::google::protobuf::Arena* arena, const StraightLineDef& from);
  StraightLineDef(::google::protobuf::Arena* arena, StraightLineDef&& from) noexcept
      : StraightLineDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 1,
    kValueFieldNumber = 2,
    kVerticalFieldNumber = 3,
  };
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // .epoch_proto.Scalar value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::epoch_proto::Scalar& value() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_value();
  ::epoch_proto::Scalar* mutable_value();
  void set_allocated_value(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_value();

  private:
  const ::epoch_proto::Scalar& _internal_value() const;
  ::epoch_proto::Scalar* _internal_mutable_value();

  public:
  // bool vertical = 3;
  void clear_vertical() ;
  bool vertical() const;
  void set_vertical(bool value);

  private:
  bool _internal_vertical() const;
  void _internal_set_vertical(bool value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.StraightLineDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StraightLineDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::epoch_proto::Scalar* value_;
    bool vertical_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Point final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Point* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Point));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Point(
      ::google::protobuf::internal::ConstantInitialized);

  inline Point(const Point& from) : Point(nullptr, from) {}
  inline Point(Point&& from) noexcept
      : Point(nullptr, std::move(from)) {}
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
        &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Point& a, Point& b) { a.Swap(&b); }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Point& from) { Point::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Point* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Point"; }

 protected:
  explicit Point(::google::protobuf::Arena* arena);
  Point(::google::protobuf::Arena* arena, const Point& from);
  Point(::google::protobuf::Arena* arena, Point&& from) noexcept
      : Point(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // .epoch_proto.Scalar x = 1;
  bool has_x() const;
  void clear_x() ;
  const ::epoch_proto::Scalar& x() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_x();
  ::epoch_proto::Scalar* mutable_x();
  void set_allocated_x(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_x();

  private:
  const ::epoch_proto::Scalar& _internal_x() const;
  ::epoch_proto::Scalar* _internal_mutable_x();

  public:
  // .epoch_proto.Scalar y = 2;
  bool has_y() const;
  void clear_y() ;
  const ::epoch_proto::Scalar& y() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_y();
  ::epoch_proto::Scalar* mutable_y();
  void set_allocated_y(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_y();

  private:
  const ::epoch_proto::Scalar& _internal_y() const;
  ::epoch_proto::Scalar* _internal_mutable_y();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.Point)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Point& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::Scalar* x_;
    ::epoch_proto::Scalar* y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class PieData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.PieData) */ {
 public:
  inline PieData() : PieData(nullptr) {}
  ~PieData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PieData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PieData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PieData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PieData(const PieData& from) : PieData(nullptr, from) {}
  inline PieData(PieData&& from) noexcept
      : PieData(nullptr, std::move(from)) {}
  inline PieData& operator=(const PieData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PieData& operator=(PieData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PieData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PieData* internal_default_instance() {
    return reinterpret_cast<const PieData*>(
        &_PieData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(PieData& a, PieData& b) { a.Swap(&b); }
  inline void Swap(PieData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PieData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PieData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PieData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PieData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PieData& from) { PieData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PieData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.PieData"; }

 protected:
  explicit PieData(::google::protobuf::Arena* arena);
  PieData(::google::protobuf::Arena* arena, const PieData& from);
  PieData(::google::protobuf::Arena* arena, PieData&& from) noexcept
      : PieData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .epoch_proto.Scalar y = 2;
  bool has_y() const;
  void clear_y() ;
  const ::epoch_proto::Scalar& y() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_y();
  ::epoch_proto::Scalar* mutable_y();
  void set_allocated_y(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_y();

  private:
  const ::epoch_proto::Scalar& _internal_y() const;
  ::epoch_proto::Scalar* _internal_mutable_y();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.PieData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PieData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::epoch_proto::Scalar* y_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class HeatMapPoint final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.HeatMapPoint) */ {
 public:
  inline HeatMapPoint() : HeatMapPoint(nullptr) {}
  ~HeatMapPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeatMapPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeatMapPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeatMapPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeatMapPoint(const HeatMapPoint& from) : HeatMapPoint(nullptr, from) {}
  inline HeatMapPoint(HeatMapPoint&& from) noexcept
      : HeatMapPoint(nullptr, std::move(from)) {}
  inline HeatMapPoint& operator=(const HeatMapPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeatMapPoint& operator=(HeatMapPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeatMapPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeatMapPoint* internal_default_instance() {
    return reinterpret_cast<const HeatMapPoint*>(
        &_HeatMapPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(HeatMapPoint& a, HeatMapPoint& b) { a.Swap(&b); }
  inline void Swap(HeatMapPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeatMapPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeatMapPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeatMapPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeatMapPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeatMapPoint& from) { HeatMapPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeatMapPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.HeatMapPoint"; }

 protected:
  explicit HeatMapPoint(::google::protobuf::Arena* arena);
  HeatMapPoint(::google::protobuf::Arena* arena, const HeatMapPoint& from);
  HeatMapPoint(::google::protobuf::Arena* arena, HeatMapPoint&& from) noexcept
      : HeatMapPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .epoch_proto.Scalar x = 1;
  bool has_x() const;
  void clear_x() ;
  const ::epoch_proto::Scalar& x() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_x();
  ::epoch_proto::Scalar* mutable_x();
  void set_allocated_x(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_x();

  private:
  const ::epoch_proto::Scalar& _internal_x() const;
  ::epoch_proto::Scalar* _internal_mutable_x();

  public:
  // .epoch_proto.Scalar y = 2;
  bool has_y() const;
  void clear_y() ;
  const ::epoch_proto::Scalar& y() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_y();
  ::epoch_proto::Scalar* mutable_y();
  void set_allocated_y(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_y();

  private:
  const ::epoch_proto::Scalar& _internal_y() const;
  ::epoch_proto::Scalar* _internal_mutable_y();

  public:
  // .epoch_proto.Scalar value = 3;
  bool has_value() const;
  void clear_value() ;
  const ::epoch_proto::Scalar& value() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_value();
  ::epoch_proto::Scalar* mutable_value();
  void set_allocated_value(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_value();

  private:
  const ::epoch_proto::Scalar& _internal_value() const;
  ::epoch_proto::Scalar* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.HeatMapPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeatMapPoint& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::Scalar* x_;
    ::epoch_proto::Scalar* y_;
    ::epoch_proto::Scalar* value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class ChartDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.ChartDef) */ {
 public:
  inline ChartDef() : ChartDef(nullptr) {}
  ~ChartDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChartDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChartDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChartDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChartDef(const ChartDef& from) : ChartDef(nullptr, from) {}
  inline ChartDef(ChartDef&& from) noexcept
      : ChartDef(nullptr, std::move(from)) {}
  inline ChartDef& operator=(const ChartDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartDef& operator=(ChartDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartDef* internal_default_instance() {
    return reinterpret_cast<const ChartDef*>(
        &_ChartDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChartDef& a, ChartDef& b) { a.Swap(&b); }
  inline void Swap(ChartDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChartDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChartDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChartDef& from) { ChartDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChartDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.ChartDef"; }

 protected:
  explicit ChartDef(::google::protobuf::Arena* arena);
  ChartDef(::google::protobuf::Arena* arena, const ChartDef& from);
  ChartDef(::google::protobuf::Arena* arena, ChartDef&& from) noexcept
      : ChartDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kCategoryFieldNumber = 4,
    kYAxisFieldNumber = 5,
    kXAxisFieldNumber = 6,
    kTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string category = 4;
  void clear_category() ;
  const std::string& category() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category(Arg_&& arg, Args_... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* value);

  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(
      const std::string& value);
  std::string* _internal_mutable_category();

  public:
  // optional .epoch_proto.AxisDef y_axis = 5;
  bool has_y_axis() const;
  void clear_y_axis() ;
  const ::epoch_proto::AxisDef& y_axis() const;
  PROTOBUF_NODISCARD ::epoch_proto::AxisDef* release_y_axis();
  ::epoch_proto::AxisDef* mutable_y_axis();
  void set_allocated_y_axis(::epoch_proto::AxisDef* value);
  void unsafe_arena_set_allocated_y_axis(::epoch_proto::AxisDef* value);
  ::epoch_proto::AxisDef* unsafe_arena_release_y_axis();

  private:
  const ::epoch_proto::AxisDef& _internal_y_axis() const;
  ::epoch_proto::AxisDef* _internal_mutable_y_axis();

  public:
  // optional .epoch_proto.AxisDef x_axis = 6;
  bool has_x_axis() const;
  void clear_x_axis() ;
  const ::epoch_proto::AxisDef& x_axis() const;
  PROTOBUF_NODISCARD ::epoch_proto::AxisDef* release_x_axis();
  ::epoch_proto::AxisDef* mutable_x_axis();
  void set_allocated_x_axis(::epoch_proto::AxisDef* value);
  void unsafe_arena_set_allocated_x_axis(::epoch_proto::AxisDef* value);
  ::epoch_proto::AxisDef* unsafe_arena_release_x_axis();

  private:
  const ::epoch_proto::AxisDef& _internal_x_axis() const;
  ::epoch_proto::AxisDef* _internal_mutable_x_axis();

  public:
  // .epoch_proto.EpochFolioDashboardWidget type = 3;
  void clear_type() ;
  ::epoch_proto::EpochFolioDashboardWidget type() const;
  void set_type(::epoch_proto::EpochFolioDashboardWidget value);

  private:
  ::epoch_proto::EpochFolioDashboardWidget _internal_type() const;
  void _internal_set_type(::epoch_proto::EpochFolioDashboardWidget value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.ChartDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChartDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr category_;
    ::epoch_proto::AxisDef* y_axis_;
    ::epoch_proto::AxisDef* x_axis_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class BoxPlotDataPointDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.BoxPlotDataPointDef) */ {
 public:
  inline BoxPlotDataPointDef() : BoxPlotDataPointDef(nullptr) {}
  ~BoxPlotDataPointDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BoxPlotDataPointDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BoxPlotDataPointDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BoxPlotDataPointDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline BoxPlotDataPointDef(const BoxPlotDataPointDef& from) : BoxPlotDataPointDef(nullptr, from) {}
  inline BoxPlotDataPointDef(BoxPlotDataPointDef&& from) noexcept
      : BoxPlotDataPointDef(nullptr, std::move(from)) {}
  inline BoxPlotDataPointDef& operator=(const BoxPlotDataPointDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxPlotDataPointDef& operator=(BoxPlotDataPointDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxPlotDataPointDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxPlotDataPointDef* internal_default_instance() {
    return reinterpret_cast<const BoxPlotDataPointDef*>(
        &_BoxPlotDataPointDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(BoxPlotDataPointDef& a, BoxPlotDataPointDef& b) { a.Swap(&b); }
  inline void Swap(BoxPlotDataPointDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxPlotDataPointDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxPlotDataPointDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BoxPlotDataPointDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoxPlotDataPointDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BoxPlotDataPointDef& from) { BoxPlotDataPointDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BoxPlotDataPointDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.BoxPlotDataPointDef"; }

 protected:
  explicit BoxPlotDataPointDef(::google::protobuf::Arena* arena);
  BoxPlotDataPointDef(::google::protobuf::Arena* arena, const BoxPlotDataPointDef& from);
  BoxPlotDataPointDef(::google::protobuf::Arena* arena, BoxPlotDataPointDef&& from) noexcept
      : BoxPlotDataPointDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOutliersFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // repeated .epoch_proto.BoxPlotOutlier outliers = 1;
  int outliers_size() const;
  private:
  int _internal_outliers_size() const;

  public:
  void clear_outliers() ;
  ::epoch_proto::BoxPlotOutlier* mutable_outliers(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>* mutable_outliers();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>& _internal_outliers() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>* _internal_mutable_outliers();
  public:
  const ::epoch_proto::BoxPlotOutlier& outliers(int index) const;
  ::epoch_proto::BoxPlotOutlier* add_outliers();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>& outliers() const;
  // repeated .epoch_proto.BoxPlotDataPoint points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::epoch_proto::BoxPlotDataPoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>* _internal_mutable_points();
  public:
  const ::epoch_proto::BoxPlotDataPoint& points(int index) const;
  ::epoch_proto::BoxPlotDataPoint* add_points();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>& points() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.BoxPlotDataPointDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BoxPlotDataPointDef& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::BoxPlotOutlier > outliers_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::BoxPlotDataPoint > points_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Band final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Band) */ {
 public:
  inline Band() : Band(nullptr) {}
  ~Band() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Band* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Band));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Band(
      ::google::protobuf::internal::ConstantInitialized);

  inline Band(const Band& from) : Band(nullptr, from) {}
  inline Band(Band&& from) noexcept
      : Band(nullptr, std::move(from)) {}
  inline Band& operator=(const Band& from) {
    CopyFrom(from);
    return *this;
  }
  inline Band& operator=(Band&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Band& default_instance() {
    return *internal_default_instance();
  }
  static inline const Band* internal_default_instance() {
    return reinterpret_cast<const Band*>(
        &_Band_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Band& a, Band& b) { a.Swap(&b); }
  inline void Swap(Band* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Band* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Band* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Band>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Band& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Band& from) { Band::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Band* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Band"; }

 protected:
  explicit Band(::google::protobuf::Arena* arena);
  Band(::google::protobuf::Arena* arena, const Band& from);
  Band(::google::protobuf::Arena* arena, Band&& from) noexcept
      : Band(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .epoch_proto.Scalar from = 1;
  bool has_from() const;
  void clear_from() ;
  const ::epoch_proto::Scalar& from() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_from();
  ::epoch_proto::Scalar* mutable_from();
  void set_allocated_from(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_from(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_from();

  private:
  const ::epoch_proto::Scalar& _internal_from() const;
  ::epoch_proto::Scalar* _internal_mutable_from();

  public:
  // .epoch_proto.Scalar to = 2;
  bool has_to() const;
  void clear_to() ;
  const ::epoch_proto::Scalar& to() const;
  PROTOBUF_NODISCARD ::epoch_proto::Scalar* release_to();
  ::epoch_proto::Scalar* mutable_to();
  void set_allocated_to(::epoch_proto::Scalar* value);
  void unsafe_arena_set_allocated_to(::epoch_proto::Scalar* value);
  ::epoch_proto::Scalar* unsafe_arena_release_to();

  private:
  const ::epoch_proto::Scalar& _internal_to() const;
  ::epoch_proto::Scalar* _internal_mutable_to();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.Band)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Band& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::Scalar* from_;
    ::epoch_proto::Scalar* to_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class XRangeDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.XRangeDef) */ {
 public:
  inline XRangeDef() : XRangeDef(nullptr) {}
  ~XRangeDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(XRangeDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(XRangeDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR XRangeDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline XRangeDef(const XRangeDef& from) : XRangeDef(nullptr, from) {}
  inline XRangeDef(XRangeDef&& from) noexcept
      : XRangeDef(nullptr, std::move(from)) {}
  inline XRangeDef& operator=(const XRangeDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline XRangeDef& operator=(XRangeDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XRangeDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const XRangeDef* internal_default_instance() {
    return reinterpret_cast<const XRangeDef*>(
        &_XRangeDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(XRangeDef& a, XRangeDef& b) { a.Swap(&b); }
  inline void Swap(XRangeDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XRangeDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XRangeDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<XRangeDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XRangeDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const XRangeDef& from) { XRangeDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(XRangeDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.XRangeDef"; }

 protected:
  explicit XRangeDef(::google::protobuf::Arena* arena);
  XRangeDef(::google::protobuf::Arena* arena, const XRangeDef& from);
  XRangeDef(::google::protobuf::Arena* arena, XRangeDef&& from) noexcept
      : XRangeDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCategoriesFieldNumber = 2,
    kPointsFieldNumber = 3,
    kChartDefFieldNumber = 1,
  };
  // repeated string categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;

  public:
  void clear_categories() ;
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_categories(int index, Arg_&& value, Args_... args);
  std::string* add_categories();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_categories(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& categories() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_categories();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_categories() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_categories();

  public:
  // repeated .epoch_proto.XRangePoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::epoch_proto::XRangePoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>* _internal_mutable_points();
  public:
  const ::epoch_proto::XRangePoint& points(int index) const;
  ::epoch_proto::XRangePoint* add_points();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>& points() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.XRangeDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const XRangeDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> categories_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::XRangePoint > points_;
    ::epoch_proto::ChartDef* chart_def_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class PieDataDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.PieDataDef) */ {
 public:
  inline PieDataDef() : PieDataDef(nullptr) {}
  ~PieDataDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PieDataDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PieDataDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PieDataDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline PieDataDef(const PieDataDef& from) : PieDataDef(nullptr, from) {}
  inline PieDataDef(PieDataDef&& from) noexcept
      : PieDataDef(nullptr, std::move(from)) {}
  inline PieDataDef& operator=(const PieDataDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline PieDataDef& operator=(PieDataDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PieDataDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const PieDataDef* internal_default_instance() {
    return reinterpret_cast<const PieDataDef*>(
        &_PieDataDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(PieDataDef& a, PieDataDef& b) { a.Swap(&b); }
  inline void Swap(PieDataDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PieDataDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PieDataDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PieDataDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PieDataDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PieDataDef& from) { PieDataDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PieDataDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.PieDataDef"; }

 protected:
  explicit PieDataDef(::google::protobuf::Arena* arena);
  PieDataDef(::google::protobuf::Arena* arena, const PieDataDef& from);
  PieDataDef(::google::protobuf::Arena* arena, PieDataDef&& from) noexcept
      : PieDataDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointsFieldNumber = 2,
    kNameFieldNumber = 1,
    kSizeFieldNumber = 3,
    kInnerSizeFieldNumber = 4,
  };
  // repeated .epoch_proto.PieData points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::epoch_proto::PieData* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>* _internal_mutable_points();
  public:
  const ::epoch_proto::PieData& points(int index) const;
  ::epoch_proto::PieData* add_points();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>& points() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string size = 3;
  void clear_size() ;
  const std::string& size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_size(Arg_&& arg, Args_... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* value);

  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(
      const std::string& value);
  std::string* _internal_mutable_size();

  public:
  // optional string inner_size = 4;
  bool has_inner_size() const;
  void clear_inner_size() ;
  const std::string& inner_size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inner_size(Arg_&& arg, Args_... args);
  std::string* mutable_inner_size();
  PROTOBUF_NODISCARD std::string* release_inner_size();
  void set_allocated_inner_size(std::string* value);

  private:
  const std::string& _internal_inner_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inner_size(
      const std::string& value);
  std::string* _internal_mutable_inner_size();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.PieDataDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PieDataDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::PieData > points_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr size_;
    ::google::protobuf::internal::ArenaStringPtr inner_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Line final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Line) */ {
 public:
  inline Line() : Line(nullptr) {}
  ~Line() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Line* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Line));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Line(
      ::google::protobuf::internal::ConstantInitialized);

  inline Line(const Line& from) : Line(nullptr, from) {}
  inline Line(Line&& from) noexcept
      : Line(nullptr, std::move(from)) {}
  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Line& operator=(Line&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Line& default_instance() {
    return *internal_default_instance();
  }
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
        &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Line& a, Line& b) { a.Swap(&b); }
  inline void Swap(Line* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Line* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Line* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Line>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Line& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Line& from) { Line::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Line* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Line"; }

 protected:
  explicit Line(::google::protobuf::Arena* arena);
  Line(::google::protobuf::Arena* arena, const Line& from);
  Line(::google::protobuf::Arena* arena, Line&& from) noexcept
      : Line(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
    kNameFieldNumber = 2,
    kDashStyleFieldNumber = 3,
    kLineWidthFieldNumber = 4,
  };
  // repeated .epoch_proto.Point data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::epoch_proto::Point* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>* _internal_mutable_data();
  public:
  const ::epoch_proto::Point& data(int index) const;
  ::epoch_proto::Point* add_data();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>& data() const;
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string dash_style = 3;
  bool has_dash_style() const;
  void clear_dash_style() ;
  const std::string& dash_style() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dash_style(Arg_&& arg, Args_... args);
  std::string* mutable_dash_style();
  PROTOBUF_NODISCARD std::string* release_dash_style();
  void set_allocated_dash_style(std::string* value);

  private:
  const std::string& _internal_dash_style() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dash_style(
      const std::string& value);
  std::string* _internal_mutable_dash_style();

  public:
  // optional uint32 line_width = 4;
  bool has_line_width() const;
  void clear_line_width() ;
  ::uint32_t line_width() const;
  void set_line_width(::uint32_t value);

  private:
  ::uint32_t _internal_line_width() const;
  void _internal_set_line_width(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.Line)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Line& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Point > data_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr dash_style_;
    ::uint32_t line_width_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class HistogramDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.HistogramDef) */ {
 public:
  inline HistogramDef() : HistogramDef(nullptr) {}
  ~HistogramDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistogramDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistogramDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistogramDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistogramDef(const HistogramDef& from) : HistogramDef(nullptr, from) {}
  inline HistogramDef(HistogramDef&& from) noexcept
      : HistogramDef(nullptr, std::move(from)) {}
  inline HistogramDef& operator=(const HistogramDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistogramDef& operator=(HistogramDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistogramDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistogramDef* internal_default_instance() {
    return reinterpret_cast<const HistogramDef*>(
        &_HistogramDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(HistogramDef& a, HistogramDef& b) { a.Swap(&b); }
  inline void Swap(HistogramDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistogramDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistogramDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistogramDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistogramDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistogramDef& from) { HistogramDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistogramDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.HistogramDef"; }

 protected:
  explicit HistogramDef(::google::protobuf::Arena* arena);
  HistogramDef(::google::protobuf::Arena* arena, const HistogramDef& from);
  HistogramDef(::google::protobuf::Arena* arena, HistogramDef&& from) noexcept
      : HistogramDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStraightLinesFieldNumber = 3,
    kChartDefFieldNumber = 1,
    kDataFieldNumber = 2,
    kBinsCountFieldNumber = 4,
  };
  // repeated .epoch_proto.StraightLineDef straight_lines = 3;
  int straight_lines_size() const;
  private:
  int _internal_straight_lines_size() const;

  public:
  void clear_straight_lines() ;
  ::epoch_proto::StraightLineDef* mutable_straight_lines(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* mutable_straight_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& _internal_straight_lines() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* _internal_mutable_straight_lines();
  public:
  const ::epoch_proto::StraightLineDef& straight_lines(int index) const;
  ::epoch_proto::StraightLineDef* add_straight_lines();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& straight_lines() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // .epoch_proto.Array data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::epoch_proto::Array& data() const;
  PROTOBUF_NODISCARD ::epoch_proto::Array* release_data();
  ::epoch_proto::Array* mutable_data();
  void set_allocated_data(::epoch_proto::Array* value);
  void unsafe_arena_set_allocated_data(::epoch_proto::Array* value);
  ::epoch_proto::Array* unsafe_arena_release_data();

  private:
  const ::epoch_proto::Array& _internal_data() const;
  ::epoch_proto::Array* _internal_mutable_data();

  public:
  // optional uint32 bins_count = 4;
  bool has_bins_count() const;
  void clear_bins_count() ;
  ::uint32_t bins_count() const;
  void set_bins_count(::uint32_t value);

  private:
  ::uint32_t _internal_bins_count() const;
  void _internal_set_bins_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.HistogramDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HistogramDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::StraightLineDef > straight_lines_;
    ::epoch_proto::ChartDef* chart_def_;
    ::epoch_proto::Array* data_;
    ::uint32_t bins_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class HeatMapDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.HeatMapDef) */ {
 public:
  inline HeatMapDef() : HeatMapDef(nullptr) {}
  ~HeatMapDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeatMapDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeatMapDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeatMapDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeatMapDef(const HeatMapDef& from) : HeatMapDef(nullptr, from) {}
  inline HeatMapDef(HeatMapDef&& from) noexcept
      : HeatMapDef(nullptr, std::move(from)) {}
  inline HeatMapDef& operator=(const HeatMapDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeatMapDef& operator=(HeatMapDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeatMapDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeatMapDef* internal_default_instance() {
    return reinterpret_cast<const HeatMapDef*>(
        &_HeatMapDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(HeatMapDef& a, HeatMapDef& b) { a.Swap(&b); }
  inline void Swap(HeatMapDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeatMapDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeatMapDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeatMapDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeatMapDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeatMapDef& from) { HeatMapDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeatMapDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.HeatMapDef"; }

 protected:
  explicit HeatMapDef(::google::protobuf::Arena* arena);
  HeatMapDef(::google::protobuf::Arena* arena, const HeatMapDef& from);
  HeatMapDef(::google::protobuf::Arena* arena, HeatMapDef&& from) noexcept
      : HeatMapDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPointsFieldNumber = 2,
    kChartDefFieldNumber = 1,
  };
  // repeated .epoch_proto.HeatMapPoint points = 2;
  int points_size() const;
  private:
  int _internal_points_size() const;

  public:
  void clear_points() ;
  ::epoch_proto::HeatMapPoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>* mutable_points();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>& _internal_points() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>* _internal_mutable_points();
  public:
  const ::epoch_proto::HeatMapPoint& points(int index) const;
  ::epoch_proto::HeatMapPoint* add_points();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>& points() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.HeatMapDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeatMapDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::HeatMapPoint > points_;
    ::epoch_proto::ChartDef* chart_def_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class BoxPlotDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.BoxPlotDef) */ {
 public:
  inline BoxPlotDef() : BoxPlotDef(nullptr) {}
  ~BoxPlotDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BoxPlotDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BoxPlotDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BoxPlotDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline BoxPlotDef(const BoxPlotDef& from) : BoxPlotDef(nullptr, from) {}
  inline BoxPlotDef(BoxPlotDef&& from) noexcept
      : BoxPlotDef(nullptr, std::move(from)) {}
  inline BoxPlotDef& operator=(const BoxPlotDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoxPlotDef& operator=(BoxPlotDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoxPlotDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoxPlotDef* internal_default_instance() {
    return reinterpret_cast<const BoxPlotDef*>(
        &_BoxPlotDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(BoxPlotDef& a, BoxPlotDef& b) { a.Swap(&b); }
  inline void Swap(BoxPlotDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoxPlotDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoxPlotDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BoxPlotDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoxPlotDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BoxPlotDef& from) { BoxPlotDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BoxPlotDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.BoxPlotDef"; }

 protected:
  explicit BoxPlotDef(::google::protobuf::Arena* arena);
  BoxPlotDef(::google::protobuf::Arena* arena, const BoxPlotDef& from);
  BoxPlotDef(::google::protobuf::Arena* arena, BoxPlotDef&& from) noexcept
      : BoxPlotDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChartDefFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // .epoch_proto.BoxPlotDataPointDef data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::epoch_proto::BoxPlotDataPointDef& data() const;
  PROTOBUF_NODISCARD ::epoch_proto::BoxPlotDataPointDef* release_data();
  ::epoch_proto::BoxPlotDataPointDef* mutable_data();
  void set_allocated_data(::epoch_proto::BoxPlotDataPointDef* value);
  void unsafe_arena_set_allocated_data(::epoch_proto::BoxPlotDataPointDef* value);
  ::epoch_proto::BoxPlotDataPointDef* unsafe_arena_release_data();

  private:
  const ::epoch_proto::BoxPlotDataPointDef& _internal_data() const;
  ::epoch_proto::BoxPlotDataPointDef* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.BoxPlotDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BoxPlotDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::epoch_proto::ChartDef* chart_def_;
    ::epoch_proto::BoxPlotDataPointDef* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class BarDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.BarDef) */ {
 public:
  inline BarDef() : BarDef(nullptr) {}
  ~BarDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BarDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BarDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BarDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline BarDef(const BarDef& from) : BarDef(nullptr, from) {}
  inline BarDef(BarDef&& from) noexcept
      : BarDef(nullptr, std::move(from)) {}
  inline BarDef& operator=(const BarDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline BarDef& operator=(BarDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BarDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const BarDef* internal_default_instance() {
    return reinterpret_cast<const BarDef*>(
        &_BarDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(BarDef& a, BarDef& b) { a.Swap(&b); }
  inline void Swap(BarDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BarDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BarDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BarDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BarDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BarDef& from) { BarDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BarDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.BarDef"; }

 protected:
  explicit BarDef(::google::protobuf::Arena* arena);
  BarDef(::google::protobuf::Arena* arena, const BarDef& from);
  BarDef(::google::protobuf::Arena* arena, BarDef&& from) noexcept
      : BarDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStraightLinesFieldNumber = 3,
    kChartDefFieldNumber = 1,
    kDataFieldNumber = 2,
    kBarWidthFieldNumber = 4,
  };
  // repeated .epoch_proto.StraightLineDef straight_lines = 3;
  int straight_lines_size() const;
  private:
  int _internal_straight_lines_size() const;

  public:
  void clear_straight_lines() ;
  ::epoch_proto::StraightLineDef* mutable_straight_lines(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* mutable_straight_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& _internal_straight_lines() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* _internal_mutable_straight_lines();
  public:
  const ::epoch_proto::StraightLineDef& straight_lines(int index) const;
  ::epoch_proto::StraightLineDef* add_straight_lines();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& straight_lines() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // .epoch_proto.Array data = 2;
  bool has_data() const;
  void clear_data() ;
  const ::epoch_proto::Array& data() const;
  PROTOBUF_NODISCARD ::epoch_proto::Array* release_data();
  ::epoch_proto::Array* mutable_data();
  void set_allocated_data(::epoch_proto::Array* value);
  void unsafe_arena_set_allocated_data(::epoch_proto::Array* value);
  ::epoch_proto::Array* unsafe_arena_release_data();

  private:
  const ::epoch_proto::Array& _internal_data() const;
  ::epoch_proto::Array* _internal_mutable_data();

  public:
  // optional uint32 bar_width = 4;
  bool has_bar_width() const;
  void clear_bar_width() ;
  ::uint32_t bar_width() const;
  void set_bar_width(::uint32_t value);

  private:
  ::uint32_t _internal_bar_width() const;
  void _internal_set_bar_width(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.BarDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BarDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::StraightLineDef > straight_lines_;
    ::epoch_proto::ChartDef* chart_def_;
    ::epoch_proto::Array* data_;
    ::uint32_t bar_width_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class PieDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.PieDef) */ {
 public:
  inline PieDef() : PieDef(nullptr) {}
  ~PieDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PieDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PieDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PieDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline PieDef(const PieDef& from) : PieDef(nullptr, from) {}
  inline PieDef(PieDef&& from) noexcept
      : PieDef(nullptr, std::move(from)) {}
  inline PieDef& operator=(const PieDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline PieDef& operator=(PieDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PieDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const PieDef* internal_default_instance() {
    return reinterpret_cast<const PieDef*>(
        &_PieDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(PieDef& a, PieDef& b) { a.Swap(&b); }
  inline void Swap(PieDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PieDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PieDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PieDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PieDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PieDef& from) { PieDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PieDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.PieDef"; }

 protected:
  explicit PieDef(::google::protobuf::Arena* arena);
  PieDef(::google::protobuf::Arena* arena, const PieDef& from);
  PieDef(::google::protobuf::Arena* arena, PieDef&& from) noexcept
      : PieDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 2,
    kChartDefFieldNumber = 1,
  };
  // repeated .epoch_proto.PieDataDef data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::epoch_proto::PieDataDef* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>* _internal_mutable_data();
  public:
  const ::epoch_proto::PieDataDef& data(int index) const;
  ::epoch_proto::PieDataDef* add_data();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>& data() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.PieDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PieDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::PieDataDef > data_;
    ::epoch_proto::ChartDef* chart_def_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class LinesDef final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.LinesDef) */ {
 public:
  inline LinesDef() : LinesDef(nullptr) {}
  ~LinesDef() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LinesDef* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LinesDef));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LinesDef(
      ::google::protobuf::internal::ConstantInitialized);

  inline LinesDef(const LinesDef& from) : LinesDef(nullptr, from) {}
  inline LinesDef(LinesDef&& from) noexcept
      : LinesDef(nullptr, std::move(from)) {}
  inline LinesDef& operator=(const LinesDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinesDef& operator=(LinesDef&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinesDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinesDef* internal_default_instance() {
    return reinterpret_cast<const LinesDef*>(
        &_LinesDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(LinesDef& a, LinesDef& b) { a.Swap(&b); }
  inline void Swap(LinesDef* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinesDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinesDef* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LinesDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinesDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LinesDef& from) { LinesDef::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LinesDef* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.LinesDef"; }

 protected:
  explicit LinesDef(::google::protobuf::Arena* arena);
  LinesDef(::google::protobuf::Arena* arena, const LinesDef& from);
  LinesDef(::google::protobuf::Arena* arena, LinesDef&& from) noexcept
      : LinesDef(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinesFieldNumber = 2,
    kStraightLinesFieldNumber = 3,
    kYPlotBandsFieldNumber = 4,
    kXPlotBandsFieldNumber = 5,
    kChartDefFieldNumber = 1,
    kOverlayFieldNumber = 6,
    kStackedFieldNumber = 7,
  };
  // repeated .epoch_proto.Line lines = 2;
  int lines_size() const;
  private:
  int _internal_lines_size() const;

  public:
  void clear_lines() ;
  ::epoch_proto::Line* mutable_lines(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>* mutable_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>& _internal_lines() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>* _internal_mutable_lines();
  public:
  const ::epoch_proto::Line& lines(int index) const;
  ::epoch_proto::Line* add_lines();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>& lines() const;
  // repeated .epoch_proto.StraightLineDef straight_lines = 3;
  int straight_lines_size() const;
  private:
  int _internal_straight_lines_size() const;

  public:
  void clear_straight_lines() ;
  ::epoch_proto::StraightLineDef* mutable_straight_lines(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* mutable_straight_lines();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& _internal_straight_lines() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* _internal_mutable_straight_lines();
  public:
  const ::epoch_proto::StraightLineDef& straight_lines(int index) const;
  ::epoch_proto::StraightLineDef* add_straight_lines();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& straight_lines() const;
  // repeated .epoch_proto.Band y_plot_bands = 4;
  int y_plot_bands_size() const;
  private:
  int _internal_y_plot_bands_size() const;

  public:
  void clear_y_plot_bands() ;
  ::epoch_proto::Band* mutable_y_plot_bands(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* mutable_y_plot_bands();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& _internal_y_plot_bands() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* _internal_mutable_y_plot_bands();
  public:
  const ::epoch_proto::Band& y_plot_bands(int index) const;
  ::epoch_proto::Band* add_y_plot_bands();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& y_plot_bands() const;
  // repeated .epoch_proto.Band x_plot_bands = 5;
  int x_plot_bands_size() const;
  private:
  int _internal_x_plot_bands_size() const;

  public:
  void clear_x_plot_bands() ;
  ::epoch_proto::Band* mutable_x_plot_bands(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* mutable_x_plot_bands();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& _internal_x_plot_bands() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* _internal_mutable_x_plot_bands();
  public:
  const ::epoch_proto::Band& x_plot_bands(int index) const;
  ::epoch_proto::Band* add_x_plot_bands();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& x_plot_bands() const;
  // .epoch_proto.ChartDef chart_def = 1;
  bool has_chart_def() const;
  void clear_chart_def() ;
  const ::epoch_proto::ChartDef& chart_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::ChartDef* release_chart_def();
  ::epoch_proto::ChartDef* mutable_chart_def();
  void set_allocated_chart_def(::epoch_proto::ChartDef* value);
  void unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value);
  ::epoch_proto::ChartDef* unsafe_arena_release_chart_def();

  private:
  const ::epoch_proto::ChartDef& _internal_chart_def() const;
  ::epoch_proto::ChartDef* _internal_mutable_chart_def();

  public:
  // optional .epoch_proto.Line overlay = 6;
  bool has_overlay() const;
  void clear_overlay() ;
  const ::epoch_proto::Line& overlay() const;
  PROTOBUF_NODISCARD ::epoch_proto::Line* release_overlay();
  ::epoch_proto::Line* mutable_overlay();
  void set_allocated_overlay(::epoch_proto::Line* value);
  void unsafe_arena_set_allocated_overlay(::epoch_proto::Line* value);
  ::epoch_proto::Line* unsafe_arena_release_overlay();

  private:
  const ::epoch_proto::Line& _internal_overlay() const;
  ::epoch_proto::Line* _internal_mutable_overlay();

  public:
  // bool stacked = 7;
  void clear_stacked() ;
  bool stacked() const;
  void set_stacked(bool value);

  private:
  bool _internal_stacked() const;
  void _internal_set_stacked(bool value);

  public:
  // @@protoc_insertion_point(class_scope:epoch_proto.LinesDef)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LinesDef& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Line > lines_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::StraightLineDef > straight_lines_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Band > y_plot_bands_;
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Band > x_plot_bands_;
    ::epoch_proto::ChartDef* chart_def_;
    ::epoch_proto::Line* overlay_;
    bool stacked_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};
// -------------------------------------------------------------------

class Chart final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Chart) */ {
 public:
  inline Chart() : Chart(nullptr) {}
  ~Chart() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Chart* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Chart));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Chart(
      ::google::protobuf::internal::ConstantInitialized);

  inline Chart(const Chart& from) : Chart(nullptr, from) {}
  inline Chart(Chart&& from) noexcept
      : Chart(nullptr, std::move(from)) {}
  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chart& operator=(Chart&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chart& default_instance() {
    return *internal_default_instance();
  }
  enum ChartTypeCase {
    kLinesDef = 1,
    kHeatMapDef = 2,
    kBarDef = 3,
    kHistogramDef = 4,
    kBoxPlotDef = 5,
    kXRangeDef = 6,
    kPieDef = 7,
    CHART_TYPE_NOT_SET = 0,
  };
  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
        &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Chart& a, Chart& b) { a.Swap(&b); }
  inline void Swap(Chart* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chart* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chart* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Chart>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Chart& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Chart& from) { Chart::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Chart* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Chart"; }

 protected:
  explicit Chart(::google::protobuf::Arena* arena);
  Chart(::google::protobuf::Arena* arena, const Chart& from);
  Chart(::google::protobuf::Arena* arena, Chart&& from) noexcept
      : Chart(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLinesDefFieldNumber = 1,
    kHeatMapDefFieldNumber = 2,
    kBarDefFieldNumber = 3,
    kHistogramDefFieldNumber = 4,
    kBoxPlotDefFieldNumber = 5,
    kXRangeDefFieldNumber = 6,
    kPieDefFieldNumber = 7,
  };
  // .epoch_proto.LinesDef lines_def = 1;
  bool has_lines_def() const;
  private:
  bool _internal_has_lines_def() const;

  public:
  void clear_lines_def() ;
  const ::epoch_proto::LinesDef& lines_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::LinesDef* release_lines_def();
  ::epoch_proto::LinesDef* mutable_lines_def();
  void set_allocated_lines_def(::epoch_proto::LinesDef* value);
  void unsafe_arena_set_allocated_lines_def(::epoch_proto::LinesDef* value);
  ::epoch_proto::LinesDef* unsafe_arena_release_lines_def();

  private:
  const ::epoch_proto::LinesDef& _internal_lines_def() const;
  ::epoch_proto::LinesDef* _internal_mutable_lines_def();

  public:
  // .epoch_proto.HeatMapDef heat_map_def = 2;
  bool has_heat_map_def() const;
  private:
  bool _internal_has_heat_map_def() const;

  public:
  void clear_heat_map_def() ;
  const ::epoch_proto::HeatMapDef& heat_map_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::HeatMapDef* release_heat_map_def();
  ::epoch_proto::HeatMapDef* mutable_heat_map_def();
  void set_allocated_heat_map_def(::epoch_proto::HeatMapDef* value);
  void unsafe_arena_set_allocated_heat_map_def(::epoch_proto::HeatMapDef* value);
  ::epoch_proto::HeatMapDef* unsafe_arena_release_heat_map_def();

  private:
  const ::epoch_proto::HeatMapDef& _internal_heat_map_def() const;
  ::epoch_proto::HeatMapDef* _internal_mutable_heat_map_def();

  public:
  // .epoch_proto.BarDef bar_def = 3;
  bool has_bar_def() const;
  private:
  bool _internal_has_bar_def() const;

  public:
  void clear_bar_def() ;
  const ::epoch_proto::BarDef& bar_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::BarDef* release_bar_def();
  ::epoch_proto::BarDef* mutable_bar_def();
  void set_allocated_bar_def(::epoch_proto::BarDef* value);
  void unsafe_arena_set_allocated_bar_def(::epoch_proto::BarDef* value);
  ::epoch_proto::BarDef* unsafe_arena_release_bar_def();

  private:
  const ::epoch_proto::BarDef& _internal_bar_def() const;
  ::epoch_proto::BarDef* _internal_mutable_bar_def();

  public:
  // .epoch_proto.HistogramDef histogram_def = 4;
  bool has_histogram_def() const;
  private:
  bool _internal_has_histogram_def() const;

  public:
  void clear_histogram_def() ;
  const ::epoch_proto::HistogramDef& histogram_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::HistogramDef* release_histogram_def();
  ::epoch_proto::HistogramDef* mutable_histogram_def();
  void set_allocated_histogram_def(::epoch_proto::HistogramDef* value);
  void unsafe_arena_set_allocated_histogram_def(::epoch_proto::HistogramDef* value);
  ::epoch_proto::HistogramDef* unsafe_arena_release_histogram_def();

  private:
  const ::epoch_proto::HistogramDef& _internal_histogram_def() const;
  ::epoch_proto::HistogramDef* _internal_mutable_histogram_def();

  public:
  // .epoch_proto.BoxPlotDef box_plot_def = 5;
  bool has_box_plot_def() const;
  private:
  bool _internal_has_box_plot_def() const;

  public:
  void clear_box_plot_def() ;
  const ::epoch_proto::BoxPlotDef& box_plot_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::BoxPlotDef* release_box_plot_def();
  ::epoch_proto::BoxPlotDef* mutable_box_plot_def();
  void set_allocated_box_plot_def(::epoch_proto::BoxPlotDef* value);
  void unsafe_arena_set_allocated_box_plot_def(::epoch_proto::BoxPlotDef* value);
  ::epoch_proto::BoxPlotDef* unsafe_arena_release_box_plot_def();

  private:
  const ::epoch_proto::BoxPlotDef& _internal_box_plot_def() const;
  ::epoch_proto::BoxPlotDef* _internal_mutable_box_plot_def();

  public:
  // .epoch_proto.XRangeDef x_range_def = 6;
  bool has_x_range_def() const;
  private:
  bool _internal_has_x_range_def() const;

  public:
  void clear_x_range_def() ;
  const ::epoch_proto::XRangeDef& x_range_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::XRangeDef* release_x_range_def();
  ::epoch_proto::XRangeDef* mutable_x_range_def();
  void set_allocated_x_range_def(::epoch_proto::XRangeDef* value);
  void unsafe_arena_set_allocated_x_range_def(::epoch_proto::XRangeDef* value);
  ::epoch_proto::XRangeDef* unsafe_arena_release_x_range_def();

  private:
  const ::epoch_proto::XRangeDef& _internal_x_range_def() const;
  ::epoch_proto::XRangeDef* _internal_mutable_x_range_def();

  public:
  // .epoch_proto.PieDef pie_def = 7;
  bool has_pie_def() const;
  private:
  bool _internal_has_pie_def() const;

  public:
  void clear_pie_def() ;
  const ::epoch_proto::PieDef& pie_def() const;
  PROTOBUF_NODISCARD ::epoch_proto::PieDef* release_pie_def();
  ::epoch_proto::PieDef* mutable_pie_def();
  void set_allocated_pie_def(::epoch_proto::PieDef* value);
  void unsafe_arena_set_allocated_pie_def(::epoch_proto::PieDef* value);
  ::epoch_proto::PieDef* unsafe_arena_release_pie_def();

  private:
  const ::epoch_proto::PieDef& _internal_pie_def() const;
  ::epoch_proto::PieDef* _internal_mutable_pie_def();

  public:
  void clear_chart_type();
  ChartTypeCase chart_type_case() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.Chart)
 private:
  class _Internal;
  void set_has_lines_def();
  void set_has_heat_map_def();
  void set_has_bar_def();
  void set_has_histogram_def();
  void set_has_box_plot_def();
  void set_has_x_range_def();
  void set_has_pie_def();
  inline bool has_chart_type() const;
  inline void clear_has_chart_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 7, 7,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Chart& from_msg);
    union ChartTypeUnion {
      constexpr ChartTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::epoch_proto::LinesDef* lines_def_;
      ::epoch_proto::HeatMapDef* heat_map_def_;
      ::epoch_proto::BarDef* bar_def_;
      ::epoch_proto::HistogramDef* histogram_def_;
      ::epoch_proto::BoxPlotDef* box_plot_def_;
      ::epoch_proto::XRangeDef* x_range_def_;
      ::epoch_proto::PieDef* pie_def_;
    } chart_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AxisDef

// optional .epoch_proto.AxisType type = 1;
inline bool AxisDef::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AxisDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::epoch_proto::AxisType AxisDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.AxisDef.type)
  return _internal_type();
}
inline void AxisDef::set_type(::epoch_proto::AxisType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:epoch_proto.AxisDef.type)
}
inline ::epoch_proto::AxisType AxisDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::AxisType>(_impl_.type_);
}
inline void AxisDef::_internal_set_type(::epoch_proto::AxisType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// optional string label = 2;
inline bool AxisDef::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AxisDef::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AxisDef::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.AxisDef.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AxisDef::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.AxisDef.label)
}
inline std::string* AxisDef::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:epoch_proto.AxisDef.label)
  return _s;
}
inline const std::string& AxisDef::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void AxisDef::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* AxisDef::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* AxisDef::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.AxisDef.label)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.label_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.label_.Set("", GetArena());
  }
  return released;
}
inline void AxisDef::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.AxisDef.label)
}

// repeated string categories = 3;
inline int AxisDef::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int AxisDef::categories_size() const {
  return _internal_categories_size();
}
inline void AxisDef::clear_categories() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.categories_.Clear();
}
inline std::string* AxisDef::add_categories() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_categories()->Add();
  // @@protoc_insertion_point(field_add_mutable:epoch_proto.AxisDef.categories)
  return _s;
}
inline const std::string& AxisDef::categories(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.AxisDef.categories)
  return _internal_categories().Get(index);
}
inline std::string* AxisDef::mutable_categories(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.AxisDef.categories)
  return _internal_mutable_categories()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AxisDef::set_categories(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_categories()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:epoch_proto.AxisDef.categories)
}
template <typename Arg_, typename... Args_>
inline void AxisDef::add_categories(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_categories(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:epoch_proto.AxisDef.categories)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AxisDef::categories() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.AxisDef.categories)
  return _internal_categories();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AxisDef::mutable_categories() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.AxisDef.categories)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_categories();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AxisDef::_internal_categories() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.categories_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AxisDef::_internal_mutable_categories() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.categories_;
}

// -------------------------------------------------------------------

// ChartDef

// string id = 1;
inline void ChartDef::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ChartDef::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChartDef::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.ChartDef.id)
}
inline std::string* ChartDef::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartDef.id)
  return _s;
}
inline const std::string& ChartDef::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void ChartDef::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ChartDef::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ChartDef::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ChartDef.id)
  return _impl_.id_.Release();
}
inline void ChartDef::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ChartDef.id)
}

// string title = 2;
inline void ChartDef::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ChartDef::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChartDef::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.ChartDef.title)
}
inline std::string* ChartDef::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartDef.title)
  return _s;
}
inline const std::string& ChartDef::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void ChartDef::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* ChartDef::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* ChartDef::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ChartDef.title)
  return _impl_.title_.Release();
}
inline void ChartDef::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ChartDef.title)
}

// .epoch_proto.EpochFolioDashboardWidget type = 3;
inline void ChartDef::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::epoch_proto::EpochFolioDashboardWidget ChartDef::type() const {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.type)
  return _internal_type();
}
inline void ChartDef::set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:epoch_proto.ChartDef.type)
}
inline ::epoch_proto::EpochFolioDashboardWidget ChartDef::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::epoch_proto::EpochFolioDashboardWidget>(_impl_.type_);
}
inline void ChartDef::_internal_set_type(::epoch_proto::EpochFolioDashboardWidget value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string category = 4;
inline void ChartDef::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.ClearToEmpty();
}
inline const std::string& ChartDef::category() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.category)
  return _internal_category();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChartDef::set_category(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.ChartDef.category)
}
inline std::string* ChartDef::mutable_category() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartDef.category)
  return _s;
}
inline const std::string& ChartDef::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_.Get();
}
inline void ChartDef::_internal_set_category(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.Set(value, GetArena());
}
inline std::string* ChartDef::_internal_mutable_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.category_.Mutable( GetArena());
}
inline std::string* ChartDef::release_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ChartDef.category)
  return _impl_.category_.Release();
}
inline void ChartDef::set_allocated_category(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ChartDef.category)
}

// optional .epoch_proto.AxisDef y_axis = 5;
inline bool ChartDef::has_y_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_axis_ != nullptr);
  return value;
}
inline void ChartDef::clear_y_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.y_axis_ != nullptr) _impl_.y_axis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::AxisDef& ChartDef::_internal_y_axis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::AxisDef* p = _impl_.y_axis_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::AxisDef&>(::epoch_proto::_AxisDef_default_instance_);
}
inline const ::epoch_proto::AxisDef& ChartDef::y_axis() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.y_axis)
  return _internal_y_axis();
}
inline void ChartDef::unsafe_arena_set_allocated_y_axis(::epoch_proto::AxisDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_axis_);
  }
  _impl_.y_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.ChartDef.y_axis)
}
inline ::epoch_proto::AxisDef* ChartDef::release_y_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::AxisDef* released = _impl_.y_axis_;
  _impl_.y_axis_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::AxisDef* ChartDef::unsafe_arena_release_y_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ChartDef.y_axis)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::AxisDef* temp = _impl_.y_axis_;
  _impl_.y_axis_ = nullptr;
  return temp;
}
inline ::epoch_proto::AxisDef* ChartDef::_internal_mutable_y_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.y_axis_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::AxisDef>(GetArena());
    _impl_.y_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(p);
  }
  return _impl_.y_axis_;
}
inline ::epoch_proto::AxisDef* ChartDef::mutable_y_axis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::AxisDef* _msg = _internal_mutable_y_axis();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartDef.y_axis)
  return _msg;
}
inline void ChartDef::set_allocated_y_axis(::epoch_proto::AxisDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.y_axis_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.y_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ChartDef.y_axis)
}

// optional .epoch_proto.AxisDef x_axis = 6;
inline bool ChartDef::has_x_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_axis_ != nullptr);
  return value;
}
inline void ChartDef::clear_x_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x_axis_ != nullptr) _impl_.x_axis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::epoch_proto::AxisDef& ChartDef::_internal_x_axis() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::AxisDef* p = _impl_.x_axis_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::AxisDef&>(::epoch_proto::_AxisDef_default_instance_);
}
inline const ::epoch_proto::AxisDef& ChartDef::x_axis() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.ChartDef.x_axis)
  return _internal_x_axis();
}
inline void ChartDef::unsafe_arena_set_allocated_x_axis(::epoch_proto::AxisDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_axis_);
  }
  _impl_.x_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.ChartDef.x_axis)
}
inline ::epoch_proto::AxisDef* ChartDef::release_x_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::AxisDef* released = _impl_.x_axis_;
  _impl_.x_axis_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::AxisDef* ChartDef::unsafe_arena_release_x_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.ChartDef.x_axis)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::AxisDef* temp = _impl_.x_axis_;
  _impl_.x_axis_ = nullptr;
  return temp;
}
inline ::epoch_proto::AxisDef* ChartDef::_internal_mutable_x_axis() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x_axis_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::AxisDef>(GetArena());
    _impl_.x_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(p);
  }
  return _impl_.x_axis_;
}
inline ::epoch_proto::AxisDef* ChartDef::mutable_x_axis() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::AxisDef* _msg = _internal_mutable_x_axis();
  // @@protoc_insertion_point(field_mutable:epoch_proto.ChartDef.x_axis)
  return _msg;
}
inline void ChartDef::set_allocated_x_axis(::epoch_proto::AxisDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.x_axis_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.x_axis_ = reinterpret_cast<::epoch_proto::AxisDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.ChartDef.x_axis)
}

// -------------------------------------------------------------------

// StraightLineDef

// string title = 1;
inline void StraightLineDef::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& StraightLineDef::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.StraightLineDef.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StraightLineDef::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.StraightLineDef.title)
}
inline std::string* StraightLineDef::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:epoch_proto.StraightLineDef.title)
  return _s;
}
inline const std::string& StraightLineDef::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void StraightLineDef::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* StraightLineDef::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* StraightLineDef::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.StraightLineDef.title)
  return _impl_.title_.Release();
}
inline void StraightLineDef::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.StraightLineDef.title)
}

// .epoch_proto.Scalar value = 2;
inline bool StraightLineDef::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& StraightLineDef::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& StraightLineDef::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.StraightLineDef.value)
  return _internal_value();
}
inline void StraightLineDef::unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.StraightLineDef.value)
}
inline ::epoch_proto::Scalar* StraightLineDef::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.value_;
  _impl_.value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* StraightLineDef::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.StraightLineDef.value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* StraightLineDef::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.value_;
}
inline ::epoch_proto::Scalar* StraightLineDef::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.StraightLineDef.value)
  return _msg;
}
inline void StraightLineDef::set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.StraightLineDef.value)
}

// bool vertical = 3;
inline void StraightLineDef::clear_vertical() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_ = false;
}
inline bool StraightLineDef::vertical() const {
  // @@protoc_insertion_point(field_get:epoch_proto.StraightLineDef.vertical)
  return _internal_vertical();
}
inline void StraightLineDef::set_vertical(bool value) {
  _internal_set_vertical(value);
  // @@protoc_insertion_point(field_set:epoch_proto.StraightLineDef.vertical)
}
inline bool StraightLineDef::_internal_vertical() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vertical_;
}
inline void StraightLineDef::_internal_set_vertical(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vertical_ = value;
}

// -------------------------------------------------------------------

// Band

// .epoch_proto.Scalar from = 1;
inline bool Band::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& Band::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& Band::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Band.from)
  return _internal_from();
}
inline void Band::unsafe_arena_set_allocated_from(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Band.from)
}
inline ::epoch_proto::Scalar* Band::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* Band::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Band.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* Band::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.from_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.from_;
}
inline ::epoch_proto::Scalar* Band::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Band.from)
  return _msg;
}
inline void Band::set_allocated_from(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Band.from)
}

// .epoch_proto.Scalar to = 2;
inline bool Band::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& Band::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& Band::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Band.to)
  return _internal_to();
}
inline void Band::unsafe_arena_set_allocated_to(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Band.to)
}
inline ::epoch_proto::Scalar* Band::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* Band::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Band.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* Band::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.to_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.to_;
}
inline ::epoch_proto::Scalar* Band::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Band.to)
  return _msg;
}
inline void Band::set_allocated_to(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Band.to)
}

// -------------------------------------------------------------------

// Point

// .epoch_proto.Scalar x = 1;
inline bool Point::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& Point::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& Point::x() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Point.x)
  return _internal_x();
}
inline void Point::unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Point.x)
}
inline ::epoch_proto::Scalar* Point::release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.x_;
  _impl_.x_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* Point::unsafe_arena_release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Point.x)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* Point::_internal_mutable_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.x_;
}
inline ::epoch_proto::Scalar* Point::mutable_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Point.x)
  return _msg;
}
inline void Point::set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Point.x)
}

// .epoch_proto.Scalar y = 2;
inline bool Point::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& Point::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& Point::y() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Point.y)
  return _internal_y();
}
inline void Point::unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Point.y)
}
inline ::epoch_proto::Scalar* Point::release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* released = _impl_.y_;
  _impl_.y_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* Point::unsafe_arena_release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Point.y)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* Point::_internal_mutable_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.y_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.y_;
}
inline ::epoch_proto::Scalar* Point::mutable_y() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Point.y)
  return _msg;
}
inline void Point::set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Point.y)
}

// -------------------------------------------------------------------

// Line

// repeated .epoch_proto.Point data = 1;
inline int Line::_internal_data_size() const {
  return _internal_data().size();
}
inline int Line::data_size() const {
  return _internal_data_size();
}
inline void Line::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::epoch_proto::Point* Line::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.Line.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>* Line::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.Line.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::epoch_proto::Point& Line::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Line.data)
  return _internal_data().Get(index);
}
inline ::epoch_proto::Point* Line::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Point* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.Line.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>& Line::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.Line.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>&
Line::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Point>*
Line::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// string name = 2;
inline void Line::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Line::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Line.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Line::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.Line.name)
}
inline std::string* Line::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Line.name)
  return _s;
}
inline const std::string& Line::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Line::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Line::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Line::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Line.name)
  return _impl_.name_.Release();
}
inline void Line::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Line.name)
}

// optional string dash_style = 3;
inline bool Line::has_dash_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Line::clear_dash_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dash_style_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Line::dash_style() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Line.dash_style)
  return _internal_dash_style();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Line::set_dash_style(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dash_style_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.Line.dash_style)
}
inline std::string* Line::mutable_dash_style() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dash_style();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Line.dash_style)
  return _s;
}
inline const std::string& Line::_internal_dash_style() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dash_style_.Get();
}
inline void Line::_internal_set_dash_style(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dash_style_.Set(value, GetArena());
}
inline std::string* Line::_internal_mutable_dash_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.dash_style_.Mutable( GetArena());
}
inline std::string* Line::release_dash_style() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Line.dash_style)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.dash_style_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.dash_style_.Set("", GetArena());
  }
  return released;
}
inline void Line::set_allocated_dash_style(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dash_style_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.dash_style_.IsDefault()) {
    _impl_.dash_style_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Line.dash_style)
}

// optional uint32 line_width = 4;
inline bool Line::has_line_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Line::clear_line_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Line::line_width() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Line.line_width)
  return _internal_line_width();
}
inline void Line::set_line_width(::uint32_t value) {
  _internal_set_line_width(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:epoch_proto.Line.line_width)
}
inline ::uint32_t Line::_internal_line_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.line_width_;
}
inline void Line::_internal_set_line_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.line_width_ = value;
}

// -------------------------------------------------------------------

// LinesDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool LinesDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void LinesDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& LinesDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& LinesDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.chart_def)
  return _internal_chart_def();
}
inline void LinesDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.LinesDef.chart_def)
}
inline ::epoch_proto::ChartDef* LinesDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* LinesDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.LinesDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* LinesDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* LinesDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.chart_def)
  return _msg;
}
inline void LinesDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.LinesDef.chart_def)
}

// repeated .epoch_proto.Line lines = 2;
inline int LinesDef::_internal_lines_size() const {
  return _internal_lines().size();
}
inline int LinesDef::lines_size() const {
  return _internal_lines_size();
}
inline void LinesDef::clear_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lines_.Clear();
}
inline ::epoch_proto::Line* LinesDef::mutable_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.lines)
  return _internal_mutable_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>* LinesDef::mutable_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.LinesDef.lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_lines();
}
inline const ::epoch_proto::Line& LinesDef::lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.lines)
  return _internal_lines().Get(index);
}
inline ::epoch_proto::Line* LinesDef::add_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Line* _add = _internal_mutable_lines()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.LinesDef.lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>& LinesDef::lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.LinesDef.lines)
  return _internal_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>&
LinesDef::_internal_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lines_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Line>*
LinesDef::_internal_mutable_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.lines_;
}

// repeated .epoch_proto.StraightLineDef straight_lines = 3;
inline int LinesDef::_internal_straight_lines_size() const {
  return _internal_straight_lines().size();
}
inline int LinesDef::straight_lines_size() const {
  return _internal_straight_lines_size();
}
inline void LinesDef::clear_straight_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.straight_lines_.Clear();
}
inline ::epoch_proto::StraightLineDef* LinesDef::mutable_straight_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.straight_lines)
  return _internal_mutable_straight_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* LinesDef::mutable_straight_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.LinesDef.straight_lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_straight_lines();
}
inline const ::epoch_proto::StraightLineDef& LinesDef::straight_lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.straight_lines)
  return _internal_straight_lines().Get(index);
}
inline ::epoch_proto::StraightLineDef* LinesDef::add_straight_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::StraightLineDef* _add = _internal_mutable_straight_lines()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.LinesDef.straight_lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& LinesDef::straight_lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.LinesDef.straight_lines)
  return _internal_straight_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>&
LinesDef::_internal_straight_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.straight_lines_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>*
LinesDef::_internal_mutable_straight_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.straight_lines_;
}

// repeated .epoch_proto.Band y_plot_bands = 4;
inline int LinesDef::_internal_y_plot_bands_size() const {
  return _internal_y_plot_bands().size();
}
inline int LinesDef::y_plot_bands_size() const {
  return _internal_y_plot_bands_size();
}
inline void LinesDef::clear_y_plot_bands() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_plot_bands_.Clear();
}
inline ::epoch_proto::Band* LinesDef::mutable_y_plot_bands(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.y_plot_bands)
  return _internal_mutable_y_plot_bands()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* LinesDef::mutable_y_plot_bands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.LinesDef.y_plot_bands)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_y_plot_bands();
}
inline const ::epoch_proto::Band& LinesDef::y_plot_bands(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.y_plot_bands)
  return _internal_y_plot_bands().Get(index);
}
inline ::epoch_proto::Band* LinesDef::add_y_plot_bands() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Band* _add = _internal_mutable_y_plot_bands()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.LinesDef.y_plot_bands)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& LinesDef::y_plot_bands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.LinesDef.y_plot_bands)
  return _internal_y_plot_bands();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>&
LinesDef::_internal_y_plot_bands() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_plot_bands_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>*
LinesDef::_internal_mutable_y_plot_bands() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.y_plot_bands_;
}

// repeated .epoch_proto.Band x_plot_bands = 5;
inline int LinesDef::_internal_x_plot_bands_size() const {
  return _internal_x_plot_bands().size();
}
inline int LinesDef::x_plot_bands_size() const {
  return _internal_x_plot_bands_size();
}
inline void LinesDef::clear_x_plot_bands() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_plot_bands_.Clear();
}
inline ::epoch_proto::Band* LinesDef::mutable_x_plot_bands(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.x_plot_bands)
  return _internal_mutable_x_plot_bands()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>* LinesDef::mutable_x_plot_bands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.LinesDef.x_plot_bands)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_x_plot_bands();
}
inline const ::epoch_proto::Band& LinesDef::x_plot_bands(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.x_plot_bands)
  return _internal_x_plot_bands().Get(index);
}
inline ::epoch_proto::Band* LinesDef::add_x_plot_bands() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Band* _add = _internal_mutable_x_plot_bands()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.LinesDef.x_plot_bands)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>& LinesDef::x_plot_bands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.LinesDef.x_plot_bands)
  return _internal_x_plot_bands();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>&
LinesDef::_internal_x_plot_bands() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_plot_bands_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Band>*
LinesDef::_internal_mutable_x_plot_bands() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.x_plot_bands_;
}

// optional .epoch_proto.Line overlay = 6;
inline bool LinesDef::has_overlay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.overlay_ != nullptr);
  return value;
}
inline void LinesDef::clear_overlay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.overlay_ != nullptr) _impl_.overlay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::epoch_proto::Line& LinesDef::_internal_overlay() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Line* p = _impl_.overlay_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Line&>(::epoch_proto::_Line_default_instance_);
}
inline const ::epoch_proto::Line& LinesDef::overlay() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.overlay)
  return _internal_overlay();
}
inline void LinesDef::unsafe_arena_set_allocated_overlay(::epoch_proto::Line* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.overlay_);
  }
  _impl_.overlay_ = reinterpret_cast<::epoch_proto::Line*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.LinesDef.overlay)
}
inline ::epoch_proto::Line* LinesDef::release_overlay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Line* released = _impl_.overlay_;
  _impl_.overlay_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Line* LinesDef::unsafe_arena_release_overlay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.LinesDef.overlay)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Line* temp = _impl_.overlay_;
  _impl_.overlay_ = nullptr;
  return temp;
}
inline ::epoch_proto::Line* LinesDef::_internal_mutable_overlay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.overlay_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Line>(GetArena());
    _impl_.overlay_ = reinterpret_cast<::epoch_proto::Line*>(p);
  }
  return _impl_.overlay_;
}
inline ::epoch_proto::Line* LinesDef::mutable_overlay() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Line* _msg = _internal_mutable_overlay();
  // @@protoc_insertion_point(field_mutable:epoch_proto.LinesDef.overlay)
  return _msg;
}
inline void LinesDef::set_allocated_overlay(::epoch_proto::Line* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.overlay_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.overlay_ = reinterpret_cast<::epoch_proto::Line*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.LinesDef.overlay)
}

// bool stacked = 7;
inline void LinesDef::clear_stacked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stacked_ = false;
}
inline bool LinesDef::stacked() const {
  // @@protoc_insertion_point(field_get:epoch_proto.LinesDef.stacked)
  return _internal_stacked();
}
inline void LinesDef::set_stacked(bool value) {
  _internal_set_stacked(value);
  // @@protoc_insertion_point(field_set:epoch_proto.LinesDef.stacked)
}
inline bool LinesDef::_internal_stacked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stacked_;
}
inline void LinesDef::_internal_set_stacked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stacked_ = value;
}

// -------------------------------------------------------------------

// HeatMapPoint

// .epoch_proto.Scalar x = 1;
inline bool HeatMapPoint::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& HeatMapPoint::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& HeatMapPoint::x() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HeatMapPoint.x)
  return _internal_x();
}
inline void HeatMapPoint::unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HeatMapPoint.x)
}
inline ::epoch_proto::Scalar* HeatMapPoint::release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.x_;
  _impl_.x_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* HeatMapPoint::unsafe_arena_release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HeatMapPoint.x)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* HeatMapPoint::_internal_mutable_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.x_;
}
inline ::epoch_proto::Scalar* HeatMapPoint::mutable_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HeatMapPoint.x)
  return _msg;
}
inline void HeatMapPoint::set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HeatMapPoint.x)
}

// .epoch_proto.Scalar y = 2;
inline bool HeatMapPoint::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& HeatMapPoint::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& HeatMapPoint::y() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HeatMapPoint.y)
  return _internal_y();
}
inline void HeatMapPoint::unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HeatMapPoint.y)
}
inline ::epoch_proto::Scalar* HeatMapPoint::release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* released = _impl_.y_;
  _impl_.y_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* HeatMapPoint::unsafe_arena_release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HeatMapPoint.y)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* HeatMapPoint::_internal_mutable_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.y_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.y_;
}
inline ::epoch_proto::Scalar* HeatMapPoint::mutable_y() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HeatMapPoint.y)
  return _msg;
}
inline void HeatMapPoint::set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HeatMapPoint.y)
}

// .epoch_proto.Scalar value = 3;
inline bool HeatMapPoint::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& HeatMapPoint::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& HeatMapPoint::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HeatMapPoint.value)
  return _internal_value();
}
inline void HeatMapPoint::unsafe_arena_set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HeatMapPoint.value)
}
inline ::epoch_proto::Scalar* HeatMapPoint::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::epoch_proto::Scalar* released = _impl_.value_;
  _impl_.value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* HeatMapPoint::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HeatMapPoint.value)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::epoch_proto::Scalar* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* HeatMapPoint::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.value_;
}
inline ::epoch_proto::Scalar* HeatMapPoint::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HeatMapPoint.value)
  return _msg;
}
inline void HeatMapPoint::set_allocated_value(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.value_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HeatMapPoint.value)
}

// -------------------------------------------------------------------

// HeatMapDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool HeatMapDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void HeatMapDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& HeatMapDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& HeatMapDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HeatMapDef.chart_def)
  return _internal_chart_def();
}
inline void HeatMapDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HeatMapDef.chart_def)
}
inline ::epoch_proto::ChartDef* HeatMapDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* HeatMapDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HeatMapDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* HeatMapDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* HeatMapDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HeatMapDef.chart_def)
  return _msg;
}
inline void HeatMapDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HeatMapDef.chart_def)
}

// repeated .epoch_proto.HeatMapPoint points = 2;
inline int HeatMapDef::_internal_points_size() const {
  return _internal_points().size();
}
inline int HeatMapDef::points_size() const {
  return _internal_points_size();
}
inline void HeatMapDef::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::epoch_proto::HeatMapPoint* HeatMapDef::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.HeatMapDef.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>* HeatMapDef::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.HeatMapDef.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::epoch_proto::HeatMapPoint& HeatMapDef::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HeatMapDef.points)
  return _internal_points().Get(index);
}
inline ::epoch_proto::HeatMapPoint* HeatMapDef::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::HeatMapPoint* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.HeatMapDef.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>& HeatMapDef::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.HeatMapDef.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>&
HeatMapDef::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::HeatMapPoint>*
HeatMapDef::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// BarDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool BarDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void BarDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& BarDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& BarDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BarDef.chart_def)
  return _internal_chart_def();
}
inline void BarDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.BarDef.chart_def)
}
inline ::epoch_proto::ChartDef* BarDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* BarDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.BarDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* BarDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* BarDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.BarDef.chart_def)
  return _msg;
}
inline void BarDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.BarDef.chart_def)
}

// .epoch_proto.Array data = 2;
inline bool BarDef::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::epoch_proto::Array& BarDef::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Array* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Array&>(::epoch_proto::_Array_default_instance_);
}
inline const ::epoch_proto::Array& BarDef::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BarDef.data)
  return _internal_data();
}
inline void BarDef::unsafe_arena_set_allocated_data(::epoch_proto::Array* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.BarDef.data)
}
inline ::epoch_proto::Array* BarDef::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Array* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Array* BarDef::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.BarDef.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Array* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::epoch_proto::Array* BarDef::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Array>(GetArena());
    _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(p);
  }
  return _impl_.data_;
}
inline ::epoch_proto::Array* BarDef::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Array* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:epoch_proto.BarDef.data)
  return _msg;
}
inline void BarDef::set_allocated_data(::epoch_proto::Array* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.BarDef.data)
}

// repeated .epoch_proto.StraightLineDef straight_lines = 3;
inline int BarDef::_internal_straight_lines_size() const {
  return _internal_straight_lines().size();
}
inline int BarDef::straight_lines_size() const {
  return _internal_straight_lines_size();
}
inline void BarDef::clear_straight_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.straight_lines_.Clear();
}
inline ::epoch_proto::StraightLineDef* BarDef::mutable_straight_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.BarDef.straight_lines)
  return _internal_mutable_straight_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* BarDef::mutable_straight_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.BarDef.straight_lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_straight_lines();
}
inline const ::epoch_proto::StraightLineDef& BarDef::straight_lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BarDef.straight_lines)
  return _internal_straight_lines().Get(index);
}
inline ::epoch_proto::StraightLineDef* BarDef::add_straight_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::StraightLineDef* _add = _internal_mutable_straight_lines()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.BarDef.straight_lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& BarDef::straight_lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.BarDef.straight_lines)
  return _internal_straight_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>&
BarDef::_internal_straight_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.straight_lines_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>*
BarDef::_internal_mutable_straight_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.straight_lines_;
}

// optional uint32 bar_width = 4;
inline bool BarDef::has_bar_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BarDef::clear_bar_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bar_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t BarDef::bar_width() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BarDef.bar_width)
  return _internal_bar_width();
}
inline void BarDef::set_bar_width(::uint32_t value) {
  _internal_set_bar_width(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:epoch_proto.BarDef.bar_width)
}
inline ::uint32_t BarDef::_internal_bar_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bar_width_;
}
inline void BarDef::_internal_set_bar_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bar_width_ = value;
}

// -------------------------------------------------------------------

// HistogramDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool HistogramDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void HistogramDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& HistogramDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& HistogramDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HistogramDef.chart_def)
  return _internal_chart_def();
}
inline void HistogramDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HistogramDef.chart_def)
}
inline ::epoch_proto::ChartDef* HistogramDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* HistogramDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HistogramDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* HistogramDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* HistogramDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HistogramDef.chart_def)
  return _msg;
}
inline void HistogramDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HistogramDef.chart_def)
}

// .epoch_proto.Array data = 2;
inline bool HistogramDef::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::epoch_proto::Array& HistogramDef::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Array* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Array&>(::epoch_proto::_Array_default_instance_);
}
inline const ::epoch_proto::Array& HistogramDef::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HistogramDef.data)
  return _internal_data();
}
inline void HistogramDef::unsafe_arena_set_allocated_data(::epoch_proto::Array* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.HistogramDef.data)
}
inline ::epoch_proto::Array* HistogramDef::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Array* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Array* HistogramDef::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.HistogramDef.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Array* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::epoch_proto::Array* HistogramDef::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Array>(GetArena());
    _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(p);
  }
  return _impl_.data_;
}
inline ::epoch_proto::Array* HistogramDef::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Array* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:epoch_proto.HistogramDef.data)
  return _msg;
}
inline void HistogramDef::set_allocated_data(::epoch_proto::Array* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::epoch_proto::Array*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.HistogramDef.data)
}

// repeated .epoch_proto.StraightLineDef straight_lines = 3;
inline int HistogramDef::_internal_straight_lines_size() const {
  return _internal_straight_lines().size();
}
inline int HistogramDef::straight_lines_size() const {
  return _internal_straight_lines_size();
}
inline void HistogramDef::clear_straight_lines() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.straight_lines_.Clear();
}
inline ::epoch_proto::StraightLineDef* HistogramDef::mutable_straight_lines(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.HistogramDef.straight_lines)
  return _internal_mutable_straight_lines()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>* HistogramDef::mutable_straight_lines()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.HistogramDef.straight_lines)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_straight_lines();
}
inline const ::epoch_proto::StraightLineDef& HistogramDef::straight_lines(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.HistogramDef.straight_lines)
  return _internal_straight_lines().Get(index);
}
inline ::epoch_proto::StraightLineDef* HistogramDef::add_straight_lines() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::StraightLineDef* _add = _internal_mutable_straight_lines()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.HistogramDef.straight_lines)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>& HistogramDef::straight_lines() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.HistogramDef.straight_lines)
  return _internal_straight_lines();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>&
HistogramDef::_internal_straight_lines() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.straight_lines_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::StraightLineDef>*
HistogramDef::_internal_mutable_straight_lines() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.straight_lines_;
}

// optional uint32 bins_count = 4;
inline bool HistogramDef::has_bins_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HistogramDef::clear_bins_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bins_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t HistogramDef::bins_count() const {
  // @@protoc_insertion_point(field_get:epoch_proto.HistogramDef.bins_count)
  return _internal_bins_count();
}
inline void HistogramDef::set_bins_count(::uint32_t value) {
  _internal_set_bins_count(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:epoch_proto.HistogramDef.bins_count)
}
inline ::uint32_t HistogramDef::_internal_bins_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bins_count_;
}
inline void HistogramDef::_internal_set_bins_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bins_count_ = value;
}

// -------------------------------------------------------------------

// BoxPlotDataPoint

// double low = 1;
inline void BoxPlotDataPoint::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = 0;
}
inline double BoxPlotDataPoint::low() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPoint.low)
  return _internal_low();
}
inline void BoxPlotDataPoint::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotDataPoint.low)
}
inline double BoxPlotDataPoint::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_;
}
inline void BoxPlotDataPoint::_internal_set_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = value;
}

// double q1 = 2;
inline void BoxPlotDataPoint::clear_q1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q1_ = 0;
}
inline double BoxPlotDataPoint::q1() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPoint.q1)
  return _internal_q1();
}
inline void BoxPlotDataPoint::set_q1(double value) {
  _internal_set_q1(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotDataPoint.q1)
}
inline double BoxPlotDataPoint::_internal_q1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q1_;
}
inline void BoxPlotDataPoint::_internal_set_q1(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q1_ = value;
}

// double median = 3;
inline void BoxPlotDataPoint::clear_median() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_ = 0;
}
inline double BoxPlotDataPoint::median() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPoint.median)
  return _internal_median();
}
inline void BoxPlotDataPoint::set_median(double value) {
  _internal_set_median(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotDataPoint.median)
}
inline double BoxPlotDataPoint::_internal_median() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.median_;
}
inline void BoxPlotDataPoint::_internal_set_median(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.median_ = value;
}

// double q3 = 4;
inline void BoxPlotDataPoint::clear_q3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q3_ = 0;
}
inline double BoxPlotDataPoint::q3() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPoint.q3)
  return _internal_q3();
}
inline void BoxPlotDataPoint::set_q3(double value) {
  _internal_set_q3(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotDataPoint.q3)
}
inline double BoxPlotDataPoint::_internal_q3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.q3_;
}
inline void BoxPlotDataPoint::_internal_set_q3(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.q3_ = value;
}

// double high = 5;
inline void BoxPlotDataPoint::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = 0;
}
inline double BoxPlotDataPoint::high() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPoint.high)
  return _internal_high();
}
inline void BoxPlotDataPoint::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotDataPoint.high)
}
inline double BoxPlotDataPoint::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_;
}
inline void BoxPlotDataPoint::_internal_set_high(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = value;
}

// -------------------------------------------------------------------

// BoxPlotOutlier

// uint64 category_index = 1;
inline void BoxPlotOutlier::clear_category_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_index_ = ::uint64_t{0u};
}
inline ::uint64_t BoxPlotOutlier::category_index() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotOutlier.category_index)
  return _internal_category_index();
}
inline void BoxPlotOutlier::set_category_index(::uint64_t value) {
  _internal_set_category_index(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotOutlier.category_index)
}
inline ::uint64_t BoxPlotOutlier::_internal_category_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.category_index_;
}
inline void BoxPlotOutlier::_internal_set_category_index(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_index_ = value;
}

// double value = 2;
inline void BoxPlotOutlier::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double BoxPlotOutlier::value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotOutlier.value)
  return _internal_value();
}
inline void BoxPlotOutlier::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:epoch_proto.BoxPlotOutlier.value)
}
inline double BoxPlotOutlier::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void BoxPlotOutlier::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// BoxPlotDataPointDef

// repeated .epoch_proto.BoxPlotOutlier outliers = 1;
inline int BoxPlotDataPointDef::_internal_outliers_size() const {
  return _internal_outliers().size();
}
inline int BoxPlotDataPointDef::outliers_size() const {
  return _internal_outliers_size();
}
inline void BoxPlotDataPointDef::clear_outliers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.outliers_.Clear();
}
inline ::epoch_proto::BoxPlotOutlier* BoxPlotDataPointDef::mutable_outliers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.BoxPlotDataPointDef.outliers)
  return _internal_mutable_outliers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>* BoxPlotDataPointDef::mutable_outliers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.BoxPlotDataPointDef.outliers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_outliers();
}
inline const ::epoch_proto::BoxPlotOutlier& BoxPlotDataPointDef::outliers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPointDef.outliers)
  return _internal_outliers().Get(index);
}
inline ::epoch_proto::BoxPlotOutlier* BoxPlotDataPointDef::add_outliers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::BoxPlotOutlier* _add = _internal_mutable_outliers()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.BoxPlotDataPointDef.outliers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>& BoxPlotDataPointDef::outliers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.BoxPlotDataPointDef.outliers)
  return _internal_outliers();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>&
BoxPlotDataPointDef::_internal_outliers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.outliers_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotOutlier>*
BoxPlotDataPointDef::_internal_mutable_outliers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.outliers_;
}

// repeated .epoch_proto.BoxPlotDataPoint points = 2;
inline int BoxPlotDataPointDef::_internal_points_size() const {
  return _internal_points().size();
}
inline int BoxPlotDataPointDef::points_size() const {
  return _internal_points_size();
}
inline void BoxPlotDataPointDef::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::epoch_proto::BoxPlotDataPoint* BoxPlotDataPointDef::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.BoxPlotDataPointDef.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>* BoxPlotDataPointDef::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.BoxPlotDataPointDef.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::epoch_proto::BoxPlotDataPoint& BoxPlotDataPointDef::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDataPointDef.points)
  return _internal_points().Get(index);
}
inline ::epoch_proto::BoxPlotDataPoint* BoxPlotDataPointDef::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::BoxPlotDataPoint* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.BoxPlotDataPointDef.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>& BoxPlotDataPointDef::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.BoxPlotDataPointDef.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>&
BoxPlotDataPointDef::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::BoxPlotDataPoint>*
BoxPlotDataPointDef::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// BoxPlotDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool BoxPlotDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void BoxPlotDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& BoxPlotDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& BoxPlotDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDef.chart_def)
  return _internal_chart_def();
}
inline void BoxPlotDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.BoxPlotDef.chart_def)
}
inline ::epoch_proto::ChartDef* BoxPlotDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* BoxPlotDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.BoxPlotDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* BoxPlotDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* BoxPlotDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.BoxPlotDef.chart_def)
  return _msg;
}
inline void BoxPlotDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.BoxPlotDef.chart_def)
}

// .epoch_proto.BoxPlotDataPointDef data = 2;
inline bool BoxPlotDef::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void BoxPlotDef::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::epoch_proto::BoxPlotDataPointDef& BoxPlotDef::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::BoxPlotDataPointDef* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::BoxPlotDataPointDef&>(::epoch_proto::_BoxPlotDataPointDef_default_instance_);
}
inline const ::epoch_proto::BoxPlotDataPointDef& BoxPlotDef::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.BoxPlotDef.data)
  return _internal_data();
}
inline void BoxPlotDef::unsafe_arena_set_allocated_data(::epoch_proto::BoxPlotDataPointDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::epoch_proto::BoxPlotDataPointDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.BoxPlotDef.data)
}
inline ::epoch_proto::BoxPlotDataPointDef* BoxPlotDef::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::BoxPlotDataPointDef* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::BoxPlotDataPointDef* BoxPlotDef::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.BoxPlotDef.data)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::BoxPlotDataPointDef* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::epoch_proto::BoxPlotDataPointDef* BoxPlotDef::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::BoxPlotDataPointDef>(GetArena());
    _impl_.data_ = reinterpret_cast<::epoch_proto::BoxPlotDataPointDef*>(p);
  }
  return _impl_.data_;
}
inline ::epoch_proto::BoxPlotDataPointDef* BoxPlotDef::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::BoxPlotDataPointDef* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:epoch_proto.BoxPlotDef.data)
  return _msg;
}
inline void BoxPlotDef::set_allocated_data(::epoch_proto::BoxPlotDataPointDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.data_ = reinterpret_cast<::epoch_proto::BoxPlotDataPointDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.BoxPlotDef.data)
}

// -------------------------------------------------------------------

// XRangePoint

// .epoch_proto.Scalar x = 1;
inline bool XRangePoint::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& XRangePoint::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.x_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& XRangePoint::x() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangePoint.x)
  return _internal_x();
}
inline void XRangePoint::unsafe_arena_set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }
  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.XRangePoint.x)
}
inline ::epoch_proto::Scalar* XRangePoint::release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.x_;
  _impl_.x_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* XRangePoint::unsafe_arena_release_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.XRangePoint.x)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.x_;
  _impl_.x_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* XRangePoint::_internal_mutable_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.x_;
}
inline ::epoch_proto::Scalar* XRangePoint::mutable_x() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:epoch_proto.XRangePoint.x)
  return _msg;
}
inline void XRangePoint::set_allocated_x(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.x_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.XRangePoint.x)
}

// .epoch_proto.Scalar x2 = 2;
inline bool XRangePoint::has_x2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.x2_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& XRangePoint::_internal_x2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.x2_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& XRangePoint::x2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangePoint.x2)
  return _internal_x2();
}
inline void XRangePoint::unsafe_arena_set_allocated_x2(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x2_);
  }
  _impl_.x2_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.XRangePoint.x2)
}
inline ::epoch_proto::Scalar* XRangePoint::release_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* released = _impl_.x2_;
  _impl_.x2_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* XRangePoint::unsafe_arena_release_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.XRangePoint.x2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::epoch_proto::Scalar* temp = _impl_.x2_;
  _impl_.x2_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* XRangePoint::_internal_mutable_x2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.x2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.x2_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.x2_;
}
inline ::epoch_proto::Scalar* XRangePoint::mutable_x2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_x2();
  // @@protoc_insertion_point(field_mutable:epoch_proto.XRangePoint.x2)
  return _msg;
}
inline void XRangePoint::set_allocated_x2(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.x2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.x2_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.XRangePoint.x2)
}

// uint64 y = 3;
inline void XRangePoint::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = ::uint64_t{0u};
}
inline ::uint64_t XRangePoint::y() const {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangePoint.y)
  return _internal_y();
}
inline void XRangePoint::set_y(::uint64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:epoch_proto.XRangePoint.y)
}
inline ::uint64_t XRangePoint::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void XRangePoint::_internal_set_y(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// bool is_long = 4;
inline void XRangePoint::clear_is_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_long_ = false;
}
inline bool XRangePoint::is_long() const {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangePoint.is_long)
  return _internal_is_long();
}
inline void XRangePoint::set_is_long(bool value) {
  _internal_set_is_long(value);
  // @@protoc_insertion_point(field_set:epoch_proto.XRangePoint.is_long)
}
inline bool XRangePoint::_internal_is_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_long_;
}
inline void XRangePoint::_internal_set_is_long(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_long_ = value;
}

// -------------------------------------------------------------------

// XRangeDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool XRangeDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void XRangeDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& XRangeDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& XRangeDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangeDef.chart_def)
  return _internal_chart_def();
}
inline void XRangeDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.XRangeDef.chart_def)
}
inline ::epoch_proto::ChartDef* XRangeDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* XRangeDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.XRangeDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* XRangeDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* XRangeDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.XRangeDef.chart_def)
  return _msg;
}
inline void XRangeDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.XRangeDef.chart_def)
}

// repeated string categories = 2;
inline int XRangeDef::_internal_categories_size() const {
  return _internal_categories().size();
}
inline int XRangeDef::categories_size() const {
  return _internal_categories_size();
}
inline void XRangeDef::clear_categories() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.categories_.Clear();
}
inline std::string* XRangeDef::add_categories() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_categories()->Add();
  // @@protoc_insertion_point(field_add_mutable:epoch_proto.XRangeDef.categories)
  return _s;
}
inline const std::string& XRangeDef::categories(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangeDef.categories)
  return _internal_categories().Get(index);
}
inline std::string* XRangeDef::mutable_categories(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.XRangeDef.categories)
  return _internal_mutable_categories()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void XRangeDef::set_categories(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_categories()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:epoch_proto.XRangeDef.categories)
}
template <typename Arg_, typename... Args_>
inline void XRangeDef::add_categories(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_categories(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:epoch_proto.XRangeDef.categories)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
XRangeDef::categories() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.XRangeDef.categories)
  return _internal_categories();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
XRangeDef::mutable_categories() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.XRangeDef.categories)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_categories();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
XRangeDef::_internal_categories() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.categories_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
XRangeDef::_internal_mutable_categories() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.categories_;
}

// repeated .epoch_proto.XRangePoint points = 3;
inline int XRangeDef::_internal_points_size() const {
  return _internal_points().size();
}
inline int XRangeDef::points_size() const {
  return _internal_points_size();
}
inline void XRangeDef::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::epoch_proto::XRangePoint* XRangeDef::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.XRangeDef.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>* XRangeDef::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.XRangeDef.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::epoch_proto::XRangePoint& XRangeDef::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.XRangeDef.points)
  return _internal_points().Get(index);
}
inline ::epoch_proto::XRangePoint* XRangeDef::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::XRangePoint* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.XRangeDef.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>& XRangeDef::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.XRangeDef.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>&
XRangeDef::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::XRangePoint>*
XRangeDef::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

// -------------------------------------------------------------------

// PieData

// string name = 1;
inline void PieData::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PieData::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieData.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PieData::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.PieData.name)
}
inline std::string* PieData::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieData.name)
  return _s;
}
inline const std::string& PieData::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PieData::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PieData::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PieData::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieData.name)
  return _impl_.name_.Release();
}
inline void PieData::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieData.name)
}

// .epoch_proto.Scalar y = 2;
inline bool PieData::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.y_ != nullptr);
  return value;
}
inline const ::epoch_proto::Scalar& PieData::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::Scalar* p = _impl_.y_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::Scalar&>(::epoch_proto::_Scalar_default_instance_);
}
inline const ::epoch_proto::Scalar& PieData::y() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieData.y)
  return _internal_y();
}
inline void PieData::unsafe_arena_set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }
  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.PieData.y)
}
inline ::epoch_proto::Scalar* PieData::release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* released = _impl_.y_;
  _impl_.y_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::Scalar* PieData::unsafe_arena_release_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieData.y)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::Scalar* temp = _impl_.y_;
  _impl_.y_ = nullptr;
  return temp;
}
inline ::epoch_proto::Scalar* PieData::_internal_mutable_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.y_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::Scalar>(GetArena());
    _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(p);
  }
  return _impl_.y_;
}
inline ::epoch_proto::Scalar* PieData::mutable_y() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::Scalar* _msg = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieData.y)
  return _msg;
}
inline void PieData::set_allocated_y(::epoch_proto::Scalar* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.y_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.y_ = reinterpret_cast<::epoch_proto::Scalar*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieData.y)
}

// -------------------------------------------------------------------

// PieDataDef

// string name = 1;
inline void PieDataDef::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PieDataDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDataDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PieDataDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.PieDataDef.name)
}
inline std::string* PieDataDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDataDef.name)
  return _s;
}
inline const std::string& PieDataDef::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void PieDataDef::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PieDataDef::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PieDataDef::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieDataDef.name)
  return _impl_.name_.Release();
}
inline void PieDataDef::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieDataDef.name)
}

// repeated .epoch_proto.PieData points = 2;
inline int PieDataDef::_internal_points_size() const {
  return _internal_points().size();
}
inline int PieDataDef::points_size() const {
  return _internal_points_size();
}
inline void PieDataDef::clear_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.points_.Clear();
}
inline ::epoch_proto::PieData* PieDataDef::mutable_points(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDataDef.points)
  return _internal_mutable_points()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>* PieDataDef::mutable_points()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.PieDataDef.points)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_points();
}
inline const ::epoch_proto::PieData& PieDataDef::points(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDataDef.points)
  return _internal_points().Get(index);
}
inline ::epoch_proto::PieData* PieDataDef::add_points() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::PieData* _add = _internal_mutable_points()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.PieDataDef.points)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>& PieDataDef::points() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.PieDataDef.points)
  return _internal_points();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>&
PieDataDef::_internal_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.points_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::PieData>*
PieDataDef::_internal_mutable_points() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.points_;
}

// string size = 3;
inline void PieDataDef::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.ClearToEmpty();
}
inline const std::string& PieDataDef::size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDataDef.size)
  return _internal_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PieDataDef::set_size(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.PieDataDef.size)
}
inline std::string* PieDataDef::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDataDef.size)
  return _s;
}
inline const std::string& PieDataDef::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_.Get();
}
inline void PieDataDef::_internal_set_size(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.Set(value, GetArena());
}
inline std::string* PieDataDef::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.size_.Mutable( GetArena());
}
inline std::string* PieDataDef::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieDataDef.size)
  return _impl_.size_.Release();
}
inline void PieDataDef::set_allocated_size(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieDataDef.size)
}

// optional string inner_size = 4;
inline bool PieDataDef::has_inner_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PieDataDef::clear_inner_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.inner_size_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PieDataDef::inner_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDataDef.inner_size)
  return _internal_inner_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PieDataDef::set_inner_size(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inner_size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.PieDataDef.inner_size)
}
inline std::string* PieDataDef::mutable_inner_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_inner_size();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDataDef.inner_size)
  return _s;
}
inline const std::string& PieDataDef::_internal_inner_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.inner_size_.Get();
}
inline void PieDataDef::_internal_set_inner_size(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inner_size_.Set(value, GetArena());
}
inline std::string* PieDataDef::_internal_mutable_inner_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.inner_size_.Mutable( GetArena());
}
inline std::string* PieDataDef::release_inner_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieDataDef.inner_size)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.inner_size_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.inner_size_.Set("", GetArena());
  }
  return released;
}
inline void PieDataDef::set_allocated_inner_size(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.inner_size_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.inner_size_.IsDefault()) {
    _impl_.inner_size_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieDataDef.inner_size)
}

// -------------------------------------------------------------------

// PieDef

// .epoch_proto.ChartDef chart_def = 1;
inline bool PieDef::has_chart_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_def_ != nullptr);
  return value;
}
inline void PieDef::clear_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ != nullptr) _impl_.chart_def_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::epoch_proto::ChartDef& PieDef::_internal_chart_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::epoch_proto::ChartDef* p = _impl_.chart_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::epoch_proto::ChartDef&>(::epoch_proto::_ChartDef_default_instance_);
}
inline const ::epoch_proto::ChartDef& PieDef::chart_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDef.chart_def)
  return _internal_chart_def();
}
inline void PieDef::unsafe_arena_set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.chart_def_);
  }
  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.PieDef.chart_def)
}
inline ::epoch_proto::ChartDef* PieDef::release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* released = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::epoch_proto::ChartDef* PieDef::unsafe_arena_release_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.PieDef.chart_def)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::epoch_proto::ChartDef* temp = _impl_.chart_def_;
  _impl_.chart_def_ = nullptr;
  return temp;
}
inline ::epoch_proto::ChartDef* PieDef::_internal_mutable_chart_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.chart_def_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::epoch_proto::ChartDef>(GetArena());
    _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(p);
  }
  return _impl_.chart_def_;
}
inline ::epoch_proto::ChartDef* PieDef::mutable_chart_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::epoch_proto::ChartDef* _msg = _internal_mutable_chart_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDef.chart_def)
  return _msg;
}
inline void PieDef::set_allocated_chart_def(::epoch_proto::ChartDef* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.chart_def_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.chart_def_ = reinterpret_cast<::epoch_proto::ChartDef*>(value);
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.PieDef.chart_def)
}

// repeated .epoch_proto.PieDataDef data = 2;
inline int PieDef::_internal_data_size() const {
  return _internal_data().size();
}
inline int PieDef::data_size() const {
  return _internal_data_size();
}
inline void PieDef::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::epoch_proto::PieDataDef* PieDef::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.PieDef.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>* PieDef::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.PieDef.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::epoch_proto::PieDataDef& PieDef::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.PieDef.data)
  return _internal_data().Get(index);
}
inline ::epoch_proto::PieDataDef* PieDef::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::PieDataDef* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.PieDef.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>& PieDef::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.PieDef.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>&
PieDef::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::PieDataDef>*
PieDef::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// Chart

// .epoch_proto.LinesDef lines_def = 1;
inline bool Chart::has_lines_def() const {
  return chart_type_case() == kLinesDef;
}
inline bool Chart::_internal_has_lines_def() const {
  return chart_type_case() == kLinesDef;
}
inline void Chart::set_has_lines_def() {
  _impl_._oneof_case_[0] = kLinesDef;
}
inline void Chart::clear_lines_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kLinesDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.lines_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.lines_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::LinesDef* Chart::release_lines_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.lines_def)
  if (chart_type_case() == kLinesDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.lines_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.lines_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::LinesDef& Chart::_internal_lines_def() const {
  return chart_type_case() == kLinesDef ? *_impl_.chart_type_.lines_def_ : reinterpret_cast<::epoch_proto::LinesDef&>(::epoch_proto::_LinesDef_default_instance_);
}
inline const ::epoch_proto::LinesDef& Chart::lines_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.lines_def)
  return _internal_lines_def();
}
inline ::epoch_proto::LinesDef* Chart::unsafe_arena_release_lines_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.lines_def)
  if (chart_type_case() == kLinesDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.lines_def_;
    _impl_.chart_type_.lines_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_lines_def(::epoch_proto::LinesDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_lines_def();
    _impl_.chart_type_.lines_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.lines_def)
}
inline ::epoch_proto::LinesDef* Chart::_internal_mutable_lines_def() {
  if (chart_type_case() != kLinesDef) {
    clear_chart_type();
    set_has_lines_def();
    _impl_.chart_type_.lines_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::LinesDef>(GetArena());
  }
  return _impl_.chart_type_.lines_def_;
}
inline ::epoch_proto::LinesDef* Chart::mutable_lines_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::LinesDef* _msg = _internal_mutable_lines_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.lines_def)
  return _msg;
}

// .epoch_proto.HeatMapDef heat_map_def = 2;
inline bool Chart::has_heat_map_def() const {
  return chart_type_case() == kHeatMapDef;
}
inline bool Chart::_internal_has_heat_map_def() const {
  return chart_type_case() == kHeatMapDef;
}
inline void Chart::set_has_heat_map_def() {
  _impl_._oneof_case_[0] = kHeatMapDef;
}
inline void Chart::clear_heat_map_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kHeatMapDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.heat_map_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.heat_map_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::HeatMapDef* Chart::release_heat_map_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.heat_map_def)
  if (chart_type_case() == kHeatMapDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.heat_map_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.heat_map_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::HeatMapDef& Chart::_internal_heat_map_def() const {
  return chart_type_case() == kHeatMapDef ? *_impl_.chart_type_.heat_map_def_ : reinterpret_cast<::epoch_proto::HeatMapDef&>(::epoch_proto::_HeatMapDef_default_instance_);
}
inline const ::epoch_proto::HeatMapDef& Chart::heat_map_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.heat_map_def)
  return _internal_heat_map_def();
}
inline ::epoch_proto::HeatMapDef* Chart::unsafe_arena_release_heat_map_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.heat_map_def)
  if (chart_type_case() == kHeatMapDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.heat_map_def_;
    _impl_.chart_type_.heat_map_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_heat_map_def(::epoch_proto::HeatMapDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_heat_map_def();
    _impl_.chart_type_.heat_map_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.heat_map_def)
}
inline ::epoch_proto::HeatMapDef* Chart::_internal_mutable_heat_map_def() {
  if (chart_type_case() != kHeatMapDef) {
    clear_chart_type();
    set_has_heat_map_def();
    _impl_.chart_type_.heat_map_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::HeatMapDef>(GetArena());
  }
  return _impl_.chart_type_.heat_map_def_;
}
inline ::epoch_proto::HeatMapDef* Chart::mutable_heat_map_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::HeatMapDef* _msg = _internal_mutable_heat_map_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.heat_map_def)
  return _msg;
}

// .epoch_proto.BarDef bar_def = 3;
inline bool Chart::has_bar_def() const {
  return chart_type_case() == kBarDef;
}
inline bool Chart::_internal_has_bar_def() const {
  return chart_type_case() == kBarDef;
}
inline void Chart::set_has_bar_def() {
  _impl_._oneof_case_[0] = kBarDef;
}
inline void Chart::clear_bar_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kBarDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.bar_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.bar_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::BarDef* Chart::release_bar_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.bar_def)
  if (chart_type_case() == kBarDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.bar_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.bar_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::BarDef& Chart::_internal_bar_def() const {
  return chart_type_case() == kBarDef ? *_impl_.chart_type_.bar_def_ : reinterpret_cast<::epoch_proto::BarDef&>(::epoch_proto::_BarDef_default_instance_);
}
inline const ::epoch_proto::BarDef& Chart::bar_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.bar_def)
  return _internal_bar_def();
}
inline ::epoch_proto::BarDef* Chart::unsafe_arena_release_bar_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.bar_def)
  if (chart_type_case() == kBarDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.bar_def_;
    _impl_.chart_type_.bar_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_bar_def(::epoch_proto::BarDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_bar_def();
    _impl_.chart_type_.bar_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.bar_def)
}
inline ::epoch_proto::BarDef* Chart::_internal_mutable_bar_def() {
  if (chart_type_case() != kBarDef) {
    clear_chart_type();
    set_has_bar_def();
    _impl_.chart_type_.bar_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::BarDef>(GetArena());
  }
  return _impl_.chart_type_.bar_def_;
}
inline ::epoch_proto::BarDef* Chart::mutable_bar_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::BarDef* _msg = _internal_mutable_bar_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.bar_def)
  return _msg;
}

// .epoch_proto.HistogramDef histogram_def = 4;
inline bool Chart::has_histogram_def() const {
  return chart_type_case() == kHistogramDef;
}
inline bool Chart::_internal_has_histogram_def() const {
  return chart_type_case() == kHistogramDef;
}
inline void Chart::set_has_histogram_def() {
  _impl_._oneof_case_[0] = kHistogramDef;
}
inline void Chart::clear_histogram_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kHistogramDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.histogram_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.histogram_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::HistogramDef* Chart::release_histogram_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.histogram_def)
  if (chart_type_case() == kHistogramDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.histogram_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.histogram_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::HistogramDef& Chart::_internal_histogram_def() const {
  return chart_type_case() == kHistogramDef ? *_impl_.chart_type_.histogram_def_ : reinterpret_cast<::epoch_proto::HistogramDef&>(::epoch_proto::_HistogramDef_default_instance_);
}
inline const ::epoch_proto::HistogramDef& Chart::histogram_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.histogram_def)
  return _internal_histogram_def();
}
inline ::epoch_proto::HistogramDef* Chart::unsafe_arena_release_histogram_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.histogram_def)
  if (chart_type_case() == kHistogramDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.histogram_def_;
    _impl_.chart_type_.histogram_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_histogram_def(::epoch_proto::HistogramDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_histogram_def();
    _impl_.chart_type_.histogram_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.histogram_def)
}
inline ::epoch_proto::HistogramDef* Chart::_internal_mutable_histogram_def() {
  if (chart_type_case() != kHistogramDef) {
    clear_chart_type();
    set_has_histogram_def();
    _impl_.chart_type_.histogram_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::HistogramDef>(GetArena());
  }
  return _impl_.chart_type_.histogram_def_;
}
inline ::epoch_proto::HistogramDef* Chart::mutable_histogram_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::HistogramDef* _msg = _internal_mutable_histogram_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.histogram_def)
  return _msg;
}

// .epoch_proto.BoxPlotDef box_plot_def = 5;
inline bool Chart::has_box_plot_def() const {
  return chart_type_case() == kBoxPlotDef;
}
inline bool Chart::_internal_has_box_plot_def() const {
  return chart_type_case() == kBoxPlotDef;
}
inline void Chart::set_has_box_plot_def() {
  _impl_._oneof_case_[0] = kBoxPlotDef;
}
inline void Chart::clear_box_plot_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kBoxPlotDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.box_plot_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.box_plot_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::BoxPlotDef* Chart::release_box_plot_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.box_plot_def)
  if (chart_type_case() == kBoxPlotDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.box_plot_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.box_plot_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::BoxPlotDef& Chart::_internal_box_plot_def() const {
  return chart_type_case() == kBoxPlotDef ? *_impl_.chart_type_.box_plot_def_ : reinterpret_cast<::epoch_proto::BoxPlotDef&>(::epoch_proto::_BoxPlotDef_default_instance_);
}
inline const ::epoch_proto::BoxPlotDef& Chart::box_plot_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.box_plot_def)
  return _internal_box_plot_def();
}
inline ::epoch_proto::BoxPlotDef* Chart::unsafe_arena_release_box_plot_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.box_plot_def)
  if (chart_type_case() == kBoxPlotDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.box_plot_def_;
    _impl_.chart_type_.box_plot_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_box_plot_def(::epoch_proto::BoxPlotDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_box_plot_def();
    _impl_.chart_type_.box_plot_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.box_plot_def)
}
inline ::epoch_proto::BoxPlotDef* Chart::_internal_mutable_box_plot_def() {
  if (chart_type_case() != kBoxPlotDef) {
    clear_chart_type();
    set_has_box_plot_def();
    _impl_.chart_type_.box_plot_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::BoxPlotDef>(GetArena());
  }
  return _impl_.chart_type_.box_plot_def_;
}
inline ::epoch_proto::BoxPlotDef* Chart::mutable_box_plot_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::BoxPlotDef* _msg = _internal_mutable_box_plot_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.box_plot_def)
  return _msg;
}

// .epoch_proto.XRangeDef x_range_def = 6;
inline bool Chart::has_x_range_def() const {
  return chart_type_case() == kXRangeDef;
}
inline bool Chart::_internal_has_x_range_def() const {
  return chart_type_case() == kXRangeDef;
}
inline void Chart::set_has_x_range_def() {
  _impl_._oneof_case_[0] = kXRangeDef;
}
inline void Chart::clear_x_range_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kXRangeDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.x_range_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.x_range_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::XRangeDef* Chart::release_x_range_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.x_range_def)
  if (chart_type_case() == kXRangeDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.x_range_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.x_range_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::XRangeDef& Chart::_internal_x_range_def() const {
  return chart_type_case() == kXRangeDef ? *_impl_.chart_type_.x_range_def_ : reinterpret_cast<::epoch_proto::XRangeDef&>(::epoch_proto::_XRangeDef_default_instance_);
}
inline const ::epoch_proto::XRangeDef& Chart::x_range_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.x_range_def)
  return _internal_x_range_def();
}
inline ::epoch_proto::XRangeDef* Chart::unsafe_arena_release_x_range_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.x_range_def)
  if (chart_type_case() == kXRangeDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.x_range_def_;
    _impl_.chart_type_.x_range_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_x_range_def(::epoch_proto::XRangeDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_x_range_def();
    _impl_.chart_type_.x_range_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.x_range_def)
}
inline ::epoch_proto::XRangeDef* Chart::_internal_mutable_x_range_def() {
  if (chart_type_case() != kXRangeDef) {
    clear_chart_type();
    set_has_x_range_def();
    _impl_.chart_type_.x_range_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::XRangeDef>(GetArena());
  }
  return _impl_.chart_type_.x_range_def_;
}
inline ::epoch_proto::XRangeDef* Chart::mutable_x_range_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::XRangeDef* _msg = _internal_mutable_x_range_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.x_range_def)
  return _msg;
}

// .epoch_proto.PieDef pie_def = 7;
inline bool Chart::has_pie_def() const {
  return chart_type_case() == kPieDef;
}
inline bool Chart::_internal_has_pie_def() const {
  return chart_type_case() == kPieDef;
}
inline void Chart::set_has_pie_def() {
  _impl_._oneof_case_[0] = kPieDef;
}
inline void Chart::clear_pie_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (chart_type_case() == kPieDef) {
    if (GetArena() == nullptr) {
      delete _impl_.chart_type_.pie_def_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.chart_type_.pie_def_);
    }
    clear_has_chart_type();
  }
}
inline ::epoch_proto::PieDef* Chart::release_pie_def() {
  // @@protoc_insertion_point(field_release:epoch_proto.Chart.pie_def)
  if (chart_type_case() == kPieDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.pie_def_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.chart_type_.pie_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::epoch_proto::PieDef& Chart::_internal_pie_def() const {
  return chart_type_case() == kPieDef ? *_impl_.chart_type_.pie_def_ : reinterpret_cast<::epoch_proto::PieDef&>(::epoch_proto::_PieDef_default_instance_);
}
inline const ::epoch_proto::PieDef& Chart::pie_def() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Chart.pie_def)
  return _internal_pie_def();
}
inline ::epoch_proto::PieDef* Chart::unsafe_arena_release_pie_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:epoch_proto.Chart.pie_def)
  if (chart_type_case() == kPieDef) {
    clear_has_chart_type();
    auto* temp = _impl_.chart_type_.pie_def_;
    _impl_.chart_type_.pie_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Chart::unsafe_arena_set_allocated_pie_def(::epoch_proto::PieDef* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_chart_type();
  if (value) {
    set_has_pie_def();
    _impl_.chart_type_.pie_def_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:epoch_proto.Chart.pie_def)
}
inline ::epoch_proto::PieDef* Chart::_internal_mutable_pie_def() {
  if (chart_type_case() != kPieDef) {
    clear_chart_type();
    set_has_pie_def();
    _impl_.chart_type_.pie_def_ =
        ::google::protobuf::Message::DefaultConstruct<::epoch_proto::PieDef>(GetArena());
  }
  return _impl_.chart_type_.pie_def_;
}
inline ::epoch_proto::PieDef* Chart::mutable_pie_def() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::epoch_proto::PieDef* _msg = _internal_mutable_pie_def();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Chart.pie_def)
  return _msg;
}

inline bool Chart::has_chart_type() const {
  return chart_type_case() != CHART_TYPE_NOT_SET;
}
inline void Chart::clear_has_chart_type() {
  _impl_._oneof_case_[0] = CHART_TYPE_NOT_SET;
}
inline Chart::ChartTypeCase Chart::chart_type_case() const {
  return Chart::ChartTypeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // chart_5fdef_2eproto_2epb_2eh
