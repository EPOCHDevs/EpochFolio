// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common.proto
// Protobuf C++ Version: 5.29.5

#ifndef common_2eproto_2epb_2eh
#define common_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2eproto;
namespace epoch_proto {
class Array;
struct ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
}  // namespace epoch_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace epoch_proto {
enum EpochFolioCategory : int {
  EPOCH_FOLIO_CATEGORY_UNSPECIFIED = 0,
  EPOCH_FOLIO_CATEGORY_STRATEGY_BENCHMARK = 1,
  EPOCH_FOLIO_CATEGORY_RISK_ANALYSIS = 2,
  EPOCH_FOLIO_CATEGORY_RETURNS_DISTRIBUTION = 3,
  EPOCH_FOLIO_CATEGORY_POSITIONS = 4,
  EPOCH_FOLIO_CATEGORY_TRANSACTIONS = 5,
  EPOCH_FOLIO_CATEGORY_ROUND_TRIP = 6,
  EpochFolioCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EpochFolioCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EpochFolioCategory_IsValid(int value);
extern const uint32_t EpochFolioCategory_internal_data_[];
constexpr EpochFolioCategory EpochFolioCategory_MIN = static_cast<EpochFolioCategory>(0);
constexpr EpochFolioCategory EpochFolioCategory_MAX = static_cast<EpochFolioCategory>(6);
constexpr int EpochFolioCategory_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
EpochFolioCategory_descriptor();
template <typename T>
const std::string& EpochFolioCategory_Name(T value) {
  static_assert(std::is_same<T, EpochFolioCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EpochFolioCategory_Name().");
  return EpochFolioCategory_Name(static_cast<EpochFolioCategory>(value));
}
template <>
inline const std::string& EpochFolioCategory_Name(EpochFolioCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EpochFolioCategory_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool EpochFolioCategory_Parse(absl::string_view name, EpochFolioCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EpochFolioCategory>(
      EpochFolioCategory_descriptor(), name, value);
}
enum EpochFolioDashboardWidget : int {
  EPOCH_FOLIO_DASHBOARD_WIDGET_UNSPECIFIED = 0,
  EPOCH_FOLIO_DASHBOARD_WIDGET_CARD = 1,
  EPOCH_FOLIO_DASHBOARD_WIDGET_LINES = 2,
  EPOCH_FOLIO_DASHBOARD_WIDGET_BAR = 3,
  EPOCH_FOLIO_DASHBOARD_WIDGET_DATA_TABLE = 4,
  EPOCH_FOLIO_DASHBOARD_WIDGET_XRANGE = 5,
  EPOCH_FOLIO_DASHBOARD_WIDGET_HISTOGRAM = 6,
  EPOCH_FOLIO_DASHBOARD_WIDGET_PIE = 7,
  EPOCH_FOLIO_DASHBOARD_WIDGET_HEAT_MAP = 8,
  EPOCH_FOLIO_DASHBOARD_WIDGET_BOX_PLOT = 9,
  EPOCH_FOLIO_DASHBOARD_WIDGET_AREA = 10,
  EPOCH_FOLIO_DASHBOARD_WIDGET_COLUMN = 11,
  EpochFolioDashboardWidget_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EpochFolioDashboardWidget_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EpochFolioDashboardWidget_IsValid(int value);
extern const uint32_t EpochFolioDashboardWidget_internal_data_[];
constexpr EpochFolioDashboardWidget EpochFolioDashboardWidget_MIN = static_cast<EpochFolioDashboardWidget>(0);
constexpr EpochFolioDashboardWidget EpochFolioDashboardWidget_MAX = static_cast<EpochFolioDashboardWidget>(11);
constexpr int EpochFolioDashboardWidget_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
EpochFolioDashboardWidget_descriptor();
template <typename T>
const std::string& EpochFolioDashboardWidget_Name(T value) {
  static_assert(std::is_same<T, EpochFolioDashboardWidget>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EpochFolioDashboardWidget_Name().");
  return EpochFolioDashboardWidget_Name(static_cast<EpochFolioDashboardWidget>(value));
}
template <>
inline const std::string& EpochFolioDashboardWidget_Name(EpochFolioDashboardWidget value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EpochFolioDashboardWidget_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool EpochFolioDashboardWidget_Parse(absl::string_view name, EpochFolioDashboardWidget* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EpochFolioDashboardWidget>(
      EpochFolioDashboardWidget_descriptor(), name, value);
}
enum EpochFolioType : int {
  EPOCH_FOLIO_TYPE_UNSPECIFIED = 0,
  EPOCH_FOLIO_TYPE_STRING = 1,
  EPOCH_FOLIO_TYPE_INTEGER = 2,
  EPOCH_FOLIO_TYPE_DECIMAL = 3,
  EPOCH_FOLIO_TYPE_PERCENT = 4,
  EPOCH_FOLIO_TYPE_BOOLEAN = 5,
  EPOCH_FOLIO_TYPE_DATE_TIME = 6,
  EPOCH_FOLIO_TYPE_DATE = 7,
  EPOCH_FOLIO_TYPE_DAY_DURATION = 8,
  EpochFolioType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EpochFolioType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EpochFolioType_IsValid(int value);
extern const uint32_t EpochFolioType_internal_data_[];
constexpr EpochFolioType EpochFolioType_MIN = static_cast<EpochFolioType>(0);
constexpr EpochFolioType EpochFolioType_MAX = static_cast<EpochFolioType>(8);
constexpr int EpochFolioType_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
EpochFolioType_descriptor();
template <typename T>
const std::string& EpochFolioType_Name(T value) {
  static_assert(std::is_same<T, EpochFolioType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EpochFolioType_Name().");
  return EpochFolioType_Name(static_cast<EpochFolioType>(value));
}
template <>
inline const std::string& EpochFolioType_Name(EpochFolioType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EpochFolioType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool EpochFolioType_Parse(absl::string_view name, EpochFolioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EpochFolioType>(
      EpochFolioType_descriptor(), name, value);
}
enum AxisType : int {
  AXIS_TYPE_UNSPECIFIED = 0,
  AXIS_TYPE_LINEAR = 1,
  AXIS_TYPE_LOGARITHMIC = 2,
  AXIS_TYPE_DATETIME = 3,
  AXIS_TYPE_CATEGORY = 4,
  AxisType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AxisType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AxisType_IsValid(int value);
extern const uint32_t AxisType_internal_data_[];
constexpr AxisType AxisType_MIN = static_cast<AxisType>(0);
constexpr AxisType AxisType_MAX = static_cast<AxisType>(4);
constexpr int AxisType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AxisType_descriptor();
template <typename T>
const std::string& AxisType_Name(T value) {
  static_assert(std::is_same<T, AxisType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AxisType_Name().");
  return AxisType_Name(static_cast<AxisType>(value));
}
template <>
inline const std::string& AxisType_Name(AxisType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AxisType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AxisType_Parse(absl::string_view name, AxisType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AxisType>(
      AxisType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Scalar final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  ~Scalar() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Scalar* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Scalar));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Scalar(
      ::google::protobuf::internal::ConstantInitialized);

  inline Scalar(const Scalar& from) : Scalar(nullptr, from) {}
  inline Scalar(Scalar&& from) noexcept
      : Scalar(nullptr, std::move(from)) {}
  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kDoubleValue = 1,
    kInt64Value = 2,
    kUint64Value = 3,
    kStringValue = 4,
    kBoolValue = 5,
    kTimestampNanos = 6,
    kNullValue = 7,
    VALUE_NOT_SET = 0,
  };
  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
        &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Scalar& a, Scalar& b) { a.Swap(&b); }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scalar* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Scalar>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Scalar& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Scalar& from) { Scalar::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Scalar* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Scalar"; }

 protected:
  explicit Scalar(::google::protobuf::Arena* arena);
  Scalar(::google::protobuf::Arena* arena, const Scalar& from);
  Scalar(::google::protobuf::Arena* arena, Scalar&& from) noexcept
      : Scalar(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDoubleValueFieldNumber = 1,
    kInt64ValueFieldNumber = 2,
    kUint64ValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kTimestampNanosFieldNumber = 6,
    kNullValueFieldNumber = 7,
  };
  // double double_value = 1;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // int64 int64_value = 2;
  bool has_int64_value() const;
  void clear_int64_value() ;
  ::int64_t int64_value() const;
  void set_int64_value(::int64_t value);

  private:
  ::int64_t _internal_int64_value() const;
  void _internal_set_int64_value(::int64_t value);

  public:
  // uint64 uint64_value = 3;
  bool has_uint64_value() const;
  void clear_uint64_value() ;
  ::uint64_t uint64_value() const;
  void set_uint64_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(::uint64_t value);

  public:
  // string string_value = 4;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // bool bool_value = 5;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // int64 timestamp_nanos = 6;
  bool has_timestamp_nanos() const;
  void clear_timestamp_nanos() ;
  ::int64_t timestamp_nanos() const;
  void set_timestamp_nanos(::int64_t value);

  private:
  ::int64_t _internal_timestamp_nanos() const;
  void _internal_set_timestamp_nanos(::int64_t value);

  public:
  // .google.protobuf.NullValue null_value = 7;
  bool has_null_value() const;
  void clear_null_value() ;
  ::google::protobuf::NullValue null_value() const;
  void set_null_value(::google::protobuf::NullValue value);

  private:
  ::google::protobuf::NullValue _internal_null_value() const;
  void _internal_set_null_value(::google::protobuf::NullValue value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.Scalar)
 private:
  class _Internal;
  void set_has_double_value();
  void set_has_int64_value();
  void set_has_uint64_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_timestamp_nanos();
  void set_has_null_value();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 7, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Scalar& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      double double_value_;
      ::int64_t int64_value_;
      ::uint64_t uint64_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::int64_t timestamp_nanos_;
      int null_value_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Array final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:epoch_proto.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  ~Array() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Array* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Array));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Array(
      ::google::protobuf::internal::ConstantInitialized);

  inline Array(const Array& from) : Array(nullptr, from) {}
  inline Array(Array&& from) noexcept
      : Array(nullptr, std::move(from)) {}
  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Array& default_instance() {
    return *internal_default_instance();
  }
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
        &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Array& a, Array& b) { a.Swap(&b); }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Array* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Array>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Array& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Array& from) { Array::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Array* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "epoch_proto.Array"; }

 protected:
  explicit Array(::google::protobuf::Arena* arena);
  Array(::google::protobuf::Arena* arena, const Array& from);
  Array(::google::protobuf::Arena* arena, Array&& from) noexcept
      : Array(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .epoch_proto.Scalar values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::epoch_proto::Scalar* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* _internal_mutable_values();
  public:
  const ::epoch_proto::Scalar& values(int index) const;
  ::epoch_proto::Scalar* add_values();
  const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& values() const;
  // @@protoc_insertion_point(class_scope:epoch_proto.Array)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Array& from_msg);
    ::google::protobuf::RepeatedPtrField< ::epoch_proto::Scalar > values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Scalar

// double double_value = 1;
inline bool Scalar::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void Scalar::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Scalar::clear_double_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Scalar::double_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.double_value)
  return _internal_double_value();
}
inline void Scalar::set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.double_value)
}
inline double Scalar::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}

// int64 int64_value = 2;
inline bool Scalar::has_int64_value() const {
  return value_case() == kInt64Value;
}
inline void Scalar::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void Scalar::clear_int64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kInt64Value) {
    _impl_.value_.int64_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t Scalar::int64_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.int64_value)
  return _internal_int64_value();
}
inline void Scalar::set_int64_value(::int64_t value) {
  if (value_case() != kInt64Value) {
    clear_value();
    set_has_int64_value();
  }
  _impl_.value_.int64_value_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.int64_value)
}
inline ::int64_t Scalar::_internal_int64_value() const {
  if (value_case() == kInt64Value) {
    return _impl_.value_.int64_value_;
  }
  return ::int64_t{0};
}

// uint64 uint64_value = 3;
inline bool Scalar::has_uint64_value() const {
  return value_case() == kUint64Value;
}
inline void Scalar::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void Scalar::clear_uint64_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kUint64Value) {
    _impl_.value_.uint64_value_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t Scalar::uint64_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.uint64_value)
  return _internal_uint64_value();
}
inline void Scalar::set_uint64_value(::uint64_t value) {
  if (value_case() != kUint64Value) {
    clear_value();
    set_has_uint64_value();
  }
  _impl_.value_.uint64_value_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.uint64_value)
}
inline ::uint64_t Scalar::_internal_uint64_value() const {
  if (value_case() == kUint64Value) {
    return _impl_.value_.uint64_value_;
  }
  return ::uint64_t{0u};
}

// string string_value = 4;
inline bool Scalar::has_string_value() const {
  return value_case() == kStringValue;
}
inline void Scalar::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Scalar::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Scalar::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Scalar::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.string_value)
}
inline std::string* Scalar::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:epoch_proto.Scalar.string_value)
  return _s;
}
inline const std::string& Scalar::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void Scalar::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* Scalar::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* Scalar::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:epoch_proto.Scalar.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void Scalar::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:epoch_proto.Scalar.string_value)
}

// bool bool_value = 5;
inline bool Scalar::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void Scalar::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Scalar::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Scalar::bool_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.bool_value)
  return _internal_bool_value();
}
inline void Scalar::set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.bool_value)
}
inline bool Scalar::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}

// int64 timestamp_nanos = 6;
inline bool Scalar::has_timestamp_nanos() const {
  return value_case() == kTimestampNanos;
}
inline void Scalar::set_has_timestamp_nanos() {
  _impl_._oneof_case_[0] = kTimestampNanos;
}
inline void Scalar::clear_timestamp_nanos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kTimestampNanos) {
    _impl_.value_.timestamp_nanos_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t Scalar::timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.timestamp_nanos)
  return _internal_timestamp_nanos();
}
inline void Scalar::set_timestamp_nanos(::int64_t value) {
  if (value_case() != kTimestampNanos) {
    clear_value();
    set_has_timestamp_nanos();
  }
  _impl_.value_.timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.timestamp_nanos)
}
inline ::int64_t Scalar::_internal_timestamp_nanos() const {
  if (value_case() == kTimestampNanos) {
    return _impl_.value_.timestamp_nanos_;
  }
  return ::int64_t{0};
}

// .google.protobuf.NullValue null_value = 7;
inline bool Scalar::has_null_value() const {
  return value_case() == kNullValue;
}
inline void Scalar::set_has_null_value() {
  _impl_._oneof_case_[0] = kNullValue;
}
inline void Scalar::clear_null_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kNullValue) {
    _impl_.value_.null_value_ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::NullValue Scalar::null_value() const {
  // @@protoc_insertion_point(field_get:epoch_proto.Scalar.null_value)
  return _internal_null_value();
}
inline void Scalar::set_null_value(::google::protobuf::NullValue value) {
  if (value_case() != kNullValue) {
    clear_value();
    set_has_null_value();
  }
  _impl_.value_.null_value_ = value;
  // @@protoc_insertion_point(field_set:epoch_proto.Scalar.null_value)
}
inline ::google::protobuf::NullValue Scalar::_internal_null_value() const {
  if (value_case() == kNullValue) {
    return static_cast<::google::protobuf::NullValue>(_impl_.value_.null_value_);
  }
  return static_cast<::google::protobuf::NullValue>(0);
}

inline bool Scalar::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Scalar::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Scalar::ValueCase Scalar::value_case() const {
  return Scalar::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Array

// repeated .epoch_proto.Scalar values = 1;
inline int Array::_internal_values_size() const {
  return _internal_values().size();
}
inline int Array::values_size() const {
  return _internal_values_size();
}
inline void Array::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::epoch_proto::Scalar* Array::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:epoch_proto.Array.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>* Array::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:epoch_proto.Array.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::epoch_proto::Scalar& Array::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:epoch_proto.Array.values)
  return _internal_values().Get(index);
}
inline ::epoch_proto::Scalar* Array::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::epoch_proto::Scalar* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:epoch_proto.Array.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>& Array::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:epoch_proto.Array.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>&
Array::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::epoch_proto::Scalar>*
Array::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epoch_proto


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::epoch_proto::EpochFolioCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::epoch_proto::EpochFolioCategory>() {
  return ::epoch_proto::EpochFolioCategory_descriptor();
}
template <>
struct is_proto_enum<::epoch_proto::EpochFolioDashboardWidget> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::epoch_proto::EpochFolioDashboardWidget>() {
  return ::epoch_proto::EpochFolioDashboardWidget_descriptor();
}
template <>
struct is_proto_enum<::epoch_proto::EpochFolioType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::epoch_proto::EpochFolioType>() {
  return ::epoch_proto::EpochFolioType_descriptor();
}
template <>
struct is_proto_enum<::epoch_proto::AxisType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::epoch_proto::AxisType>() {
  return ::epoch_proto::AxisType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // common_2eproto_2epb_2eh
